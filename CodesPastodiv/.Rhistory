for (i in 1:n.herds){
ram.Network[i,i-1] <- 1
}
ram.Network[1,n.herds-1] <- 1
#ram.Network[n.herds,n.herds-1] <- 0
#ram.Network[n.herds,n.herds] <- 1
herds.Network = list(ram.circulation = ram.Network, ewe.replace =NULL)
plot(graph_from_adjacency_matrix(t(ram.Network), mode = c("directed")))
ram.Network <- diag(0,n.herds)
for (i in 1:n.herds){
ram.Network[i,i-1] <- 1
}
#ram.Network[1,n.herds-1] <- 1
#ram.Network[n.herds,n.herds-1] <- 0
#ram.Network[n.herds,n.herds] <- 1
herds.Network = list(ram.circulation = ram.Network, ewe.replace =NULL)
plot(graph_from_adjacency_matrix(t(ram.Network), mode = c("directed")))
ram.Network[1,n.herds] <- 1
#ram.Network[n.herds,n.herds-1] <- 0
#ram.Network[n.herds,n.herds] <- 1
herds.Network = list(ram.circulation = ram.Network, ewe.replace =NULL)
plot(graph_from_adjacency_matrix(t(ram.Network), mode = c("directed")))
res <- Simulate.herds(n.herds ,n.generations,param.allHerds = param,herds.Network)
LHerds <- res$LHerds
geneal<- compute.geneal(LHerds)
inBreeding <- compute.inbreeding(geneal$geneal, geneal$ped)
LHerds <- res$LHerds
geneal<- compute.geneal(LHerds)
res <- Simulate.herds(n.herds ,n.generations,param.allHerds = param,herds.Network)
LHerds <- res$LHerds
geneal<- compute.geneal(LHerds)
inBreeding <- compute.inbreeding(geneal$geneal, geneal$ped)
ggplot(inBreeding,aes(x=inBreed)) + geom_histogram()
ggplot(inBreeding,aes(col=herd,y=inBreed,x=herd)) + geom_boxplot() + ggtitle('independant ')
res_kinship <- compute.kinship(geneal$geneal, geneal$ped)
mat_kinship <- res_kinship$kinshipMatrix
plotMyMatrix(mat_kinship)
res_SBM_kinship <- estimateSimpleSBM(mat_kinship,model='gaussian')
plot(res_SBM_kinship)
blocks <- res_SBM_kinship$memberships
names(blocks) <- rownames(mat_kinship)
u <- which(geneal$ped$herd!=-1)
herds <- geneal$ped$herd[u]
id_present <- geneal$ped[u,]$ind
length(herds)
plotMyMatrix(table(herds,blocks),dimLabels = c('Blocks','Herds'),plotOptions=list(legend = TRUE))
plotMyMatrix(mat_kinship)
plot(res_SBM_kinship)
u <- which(geneal$ped$herd!=-1)
herds <- geneal$ped$herd[u]
id_present <- geneal$ped[u,]$ind
length(herds)
length(blocks)
dim(mat_kinship)
geneal$ped$herd
u <- which(geneal$ped$herd!=-1)
herds <- geneal$ped$herd[u]
id_present <- geneal$ped[u,]$ind
length(herds)
length(blocks)
geneal<- compute.geneal(LHerds)
u <- which(geneal$ped$herd!=-1)
herds <- geneal$ped$herd[u]
id_present <- geneal$ped[u,]$ind
length(herds)
length(blocks)
inBreeding <- compute.inbreeding(geneal$geneal, geneal$ped)
ggplot(inBreeding,aes(x=inBreed)) + geom_histogram()
ggplot(inBreeding,aes(col=herd,y=inBreed,x=herd)) + geom_boxplot() + ggtitle('independant ')
res_kinship <- compute.kinship(geneal$geneal, geneal$ped)
source("~/WORK_ALL/RECHERCHE/TRAVAUX_RECHERCHE/Barbillon-Salpeteur/pastodivModels/CodesPastodiv/functions/modules_simulation.R")
source("~/WORK_ALL/RECHERCHE/TRAVAUX_RECHERCHE/Barbillon-Salpeteur/pastodivModels/CodesPastodiv/functions/modules_simulation.R")
install.packages("GENLIB")
rm(list=ls())
source('functions/modules_simulation.R')
source('functions/complete_simulation.R')
library(igraph,ggplot2)
library(tidyverse)
library(sbm)
n.herds  <- 5#Nb de troupeaux
n.generations <- 50 # Nb de générations
# Parameters
param.default <- list(n.ram = 2,
n.ewe = 40,
age.max.repro.ram = 8,
age.max.repro.ewe = 8,
age.min.repro.ewe = 3,
age.min.repro.ram = 1,
career.ram  = 3)
param.default$rate.repro = as.data.frame(cbind(c(0,1,2),c(0,1,0)))
names(param.default$rate.repro) = c('nb.lambs','probability')
param = lapply(1:n.herds,function(i) param.default) # here same parameters for all the Herds.
ram.Network <- diag(1,n.herds)
plot(graph_from_adjacency_matrix(ram.Network, mode = c("directed")))
herds.Network = list(ewe.replace= NULL,ram.replace = ram.Network,ram.circulation = NULL)
# Simulation
myparam <- param
myparam[[1]]$career.ram = 3
param.allHerds <- myparam
res <- Simulate.herds(n.herds,n.generations,param.allHerds,herds.Network = herds.Network,LHerds=NULL,computeInbreeding  = FALSE)
LHerds <- res$LHerds
geneal<- compute.geneal(LHerds)
inBreeding <- compute.inbreeding(geneal$geneal, geneal$ped)
ggplot(inBreeding,aes(x=inBreed)) + geom_histogram()
ggplot(inBreeding,aes(col=herd,y=inBreed,x=herd)) + geom_boxplot() + ggtitle('independant ')
res_kinship <-compute.kinship(geneal$geneal, geneal$ped)
mat_kinship <- res_kinship$kinshipMatrix
plotMyMatrix(mat_kinship)
#######################################################################"
#################" SIMULATION 2 : Hub : one people gives to all the others
#######################################################################"
ram.Network <- diag(0,n.herds)
ram.Network[,1] <- 1
#ram.Network[n.herds,1] <- 0
#ram.Network[n.herds,n.herds] <- 1
herds.Network = list(ewe.replace= NULL,ram.replace = ram.Network)
plot(graph_from_adjacency_matrix(t(ram.Network), mode = c("directed")))
#------------- Simulation
res <- Simulate.herds(n.herds,n.generations,param.allHerds = param,herds.Network = herds.Network,LHerds = NULL)
LHerds <- res$LHerds
geneal<- compute.geneal(LHerds)
inBreeding <- compute.inbreeding(geneal$geneal, geneal$ped)
ggplot(inBreeding,aes(x=inBreed)) + geom_histogram()
ggplot(inBreeding,aes(col=herd,y=inBreed,x=herd)) + geom_boxplot() + ggtitle('independant ')
res_kinship <- compute.kinship(geneal$geneal, geneal$ped)
mat_kinship <- res_kinship$kinshipMatrix
plotMyMatrix(mat_kinship)
res_SBM_kinship <- estimateSimpleSBM(mat_kinship,model='gaussian')
#which.max(res_SBM_kinship$storedModels$ICL)
#res_SBM_kinship$setModel(24)
plot(res_SBM_kinship)
blocks <- res_SBM_kinship$memberships
names(blocks) <- rownames(mat_kinship)
u <- which(geneal$ped$herd!=-1)
herds <- geneal$ped$herd[u]
id_present <- geneal$ped[u,]$ind
length(herds)
plotMyMatrix(table(herds,blocks),dimLabels = c('Blocks','Herds'),plotOptions=list(legend = TRUE))
plotAlluvial(list(herds = herds, blocks=blocks))
res_SBM_kinship$setModel(5)
#which.max(res_SBM_kinship$storedModels$ICL)
#res_SBM_kinship$setModel(24)
plot(res_SBM_kinship)
which.max(res_SBM_kinship$storedModels$ICL)
res_SBM_kinship$setModel(wm)
wm <- which.max(res_SBM_kinship$storedModels$ICL)
res_SBM_kinship$setModel(wm)
plotMyMatrix(table(herds,blocks),dimLabels = c('Blocks','Herds'),plotOptions=list(legend = TRUE))
plotMyMatrix(table(herds,blocks),dimLabels = c('Herds','Blocks'),plotOptions=list(legend = TRUE))
table(herds,blocks)
#######################################################################"
#################" SIMULATION 3 : random network
#######################################################################"
set.seed(1)
test  = TRUE
while(test){
ram.Network <- matrix(sample(c(0,1),(n.herds)^2,replace=TRUE,prob = c(9/10,1/10)),(n.herds),(n.herds))
diag(ram.Network) <- 0
#ram.Network[1,] <- ram.Network[,1] <- 0
#ram.Network[1,1] <- 1
test  = sum((rowSums(ram.Network)==0)) >0
}
plot(graph_from_adjacency_matrix(t(ram.Network), mode = c("directed")),main = "Ram")
herds.Network = list(ram.replace = ram.Network, ewe.replace =NULL)
res  <- Simulate.herds(n.herds ,n.generations,param.allHerds = param,herds.Network)
LHerds <- res$LHerds
geneal<- compute.geneal(LHerds)
inBreeding <- compute.inbreeding(geneal$geneal, geneal$ped)
ggplot(inBreeding,aes(x=inBreed)) + geom_histogram()
ggplot(inBreeding,aes(col=herd,y=inBreed,x=herd)) + geom_boxplot() + ggtitle('independant ')
res_kinship <- compute.kinship(geneal$geneal, geneal$ped)
mat_kinship <- res_kinship$kinshipMatrix
plotMyMatrix(mat_kinship)
res_SBM_kinship <- estimateSimpleSBM(mat_kinship,model='gaussian')
plot(res_SBM_kinship)
blocks <- res_SBM_kinship$memberships
names(blocks) <- rownames(mat_kinship)
u <- which(geneal$ped$herd!=-1)
herds <- geneal$ped$herd[u]
id_present <- geneal$ped[u,]$ind
length(herds)
plotMyMatrix(table(herds,blocks),dimLabels = c('Blocks','Herds'),plotOptions=list(legend = TRUE))
plotAlluvial(list(herds = herds, blocks=blocks))
mean(mat_kinship)
length(herds)
dim(mat_kinship)
mean(mat_kinship[herds==1,herds==1])
sapply(1:5,function(k){mean(mat_kinship[herds==k,herds==k]),1)
sapply(1:5,function(k){mean(mat_kinship[herds==k,herds==k])}
)
LHerds
geneal
N <- nrow(geneal$ped); geneal$ped[(N-10):N,]
n = 1000
Y = Delta + rexp(n,theta)
Delta = 5
theta = 2
n = 1000
Y = Delta + rexp(n,theta)
hist(Y)
lik_expDelta <- function(Y,Delta,theta){
n = length(Y)
L <- exp(-n*theta) * theta^sum(Y)* theta^(-n*delta) * (min(Y)>Delta)
}
seq_Delta = c(1,10,by=0.1)
Delta = 5
theta = 2
n = 1000
Y = Delta + rexp(n,theta)
hist(Y)
lik_expDelta <- function(seq_Delta,theta,Y){
n <- length(Y)
L <- exp(-n*theta) * theta^sum(Y)* theta^(-n*seq_Delta) * (min(Y)>seq_Delta)
return(L)
}
lik_expDelta(seq_Delta,2,Y)
seq_Delta = c(1,10,by=0.1)
seq_Delta
seq_Delta = seq(1,10, 0.1)
seq_Delta = seq(1,10, by= 0.1)
seq_Delta
n <- length(Y)
exp(-n*theta)
theta
Delta = 5
theta = 2
n = 1000
Y = Delta + rexp(n,theta)
hist(Y)
lik_expDelta <- function(seq_Delta,theta,Y){
n <- length(Y)
L <- (-n*theta + sum(Y)*log(theta) - n*seq_Delta* log(theta)) * (min(Y)>seq_Delta)
return(L)
}
lik_expDelta(seq_Delta,2,Y)
plot(seq_Delta,lik_expDelta(seq_Delta,2,Y), type='l')
min(Y)>seq_Delta
(-n*theta + sum(Y)*log(theta) - n*seq_Delta* log(theta))
exp((-n*theta + sum(Y)*log(theta) - n*seq_Delta* log(theta)))
Delta = 5
theta = 2
n = 1000
Y = Delta + rexp(n,theta)
hist(Y)
lik_expDelta <- function(seq_Delta,theta,Y){
n <- length(Y)
L <- (n*theta - sum(Y)*log(theta) + n*seq_Delta* theta) * (min(Y)>seq_Delta)
return(L)
}
plot(seq_Delta,lik_expDelta(seq_Delta,2,Y), type='l')
theta_trial =2
seq_Delta = seq(1,10, by= 0.1)
plot(seq_Delta,lik_expDelta(seq_Delta,theta_trial,Y), type='l')
theta_trial =1
seq_Delta = seq(1,10, by= 0.1)
plot(seq_Delta,lik_expDelta(seq_Delta,theta_trial,Y), type='l')
theta_trial = 0.5
seq_Delta = seq(1,10, by= 0.1)
plot(seq_Delta,lik_expDelta(seq_Delta,theta_trial,Y), type='l')
U  = rexp(n,2)
V = U + rexp(n,3)
X = min(U,V)
X
######################"
U  = rexp(n,2)
V = U + rexp(n,3)
U
X = applu(cbind(U,V),1,min)
X = apply(cbind(U,V),1,min)
X
hist(X)
plot(density(X))
rhat <- n*sum(Y*log(Y)) - sum(log(Y))*sum(Y)
rhat
beta_hat <- n^2 * rhat
beta_hat
beta_hat <- n^2 / rhat
beta_hat
alpha_hat
rhat <- n*sum(Y*log(Y)) - sum(log(Y))*sum(Y)
alpha_hat <- n*sum(Y) /rhat
alpha_hat
lines(dgamma(x,alpha_hat,beta_hat))
curve(dgamma(x,alpha_hat,beta_hat),add=TRUE,col='red')
help(dgamma)
curve(dgamma(x,shape = alpha_hat,rate = beta_hat),add=TRUE,col='red')
plot(density(X))
curve(dgamma(x,shape = alpha_hat,rate = beta_hat),add=TRUE,col='red')
source("~/Dropbox/WORK_DROPBOX/RECHERCHE_en_cours/FrancoisKaren_Cinetique/Code5/essai_1.R", echo=TRUE)
alpha_hat/beta_hat
curve(dgamma(x,shape = alpha_hat,rate = 1/beta_hat),add=TRUE,col='red')
plot(density(X))
curve(dgamma(x,shape = alpha_hat,rate = 1/beta_hat),add=TRUE,col='red')
Y <- rgamma(n,alpha_hat,beta_hat)
plot(density(Y))
Y <- rgamma(n,shape= alpha_hat, rate = beta_hat)
plot(density(Y))
######################"
U  = rexp(n,2)
V = U + rexp(n,3)
X = apply(cbind(U,V),1,min)
rhat <- n*sum(X*log(X)) - sum(log(X))*sum(X)
alpha_hat <- n*sum(X) /rhat
beta_hat <- n^2 / rhat
plot(density(X))
curve(dgamma(x,shape = alpha_hat,rate = beta_hat),add=TRUE,col='red')
Y <- rgamma(n,shape= alpha_hat, rate = beta_hat)
rm(list=ls())
source('functions/modules_simulation.R')
source('functions/complete_simulation.R')
library(igraph,ggplot2)
library(tidyverse)
library(sbm)
######  General parameters #################
n.herds  <- 5#Nb de troupeaux
n.generations <- 50 # Nb de générations
# Parameters
param.default <- list(n.ram = 2,
n.ewe = 40,
age.max.repro.ram = 8,
age.max.repro.ewe = 8,
age.min.repro.ewe = 3,
age.min.repro.ram = 1,
career.ram  = 3)
param.default$rate.repro = as.data.frame(cbind(c(0,1,2),c(0,1,0)))
names(param.default$rate.repro) = c('nb.lambs','probability')
param = lapply(1:n.herds,function(i) param.default) # here same parameters for all the Herds.
####################################################################""
#################" SIMULATION 1 : independent herds : no exchange
#######################################################################"
# Network
ram.Network <- diag(1,n.herds)
plot(graph_from_adjacency_matrix(ram.Network, mode = c("directed")))
herds.Network = list(ewe.replace= NULL,ram.replace = ram.Network,ram.circulation = NULL)
# Simulation
myparam <- param
myparam[[1]]$career.ram = 3
param.allHerds <- myparam
simulatedHerds <- Simulate.herds(n.herds,n.generations,param.allHerds,herds.Network = herds.Network,LHerds=NULL,computeInbreeding  = FALSE)
LHerds <- simulatedHerds$LHerds
geneal<- compute.geneal(LHerds)
inBreeding <- compute.inbreeding(geneal$geneal, geneal$ped)
ggplot(inBreeding,aes(x=inBreed)) + geom_histogram()
ggplot(inBreeding,aes(col=herd,y=inBreed,x=herd)) + geom_boxplot() + ggtitle('independant ')
res_kinship <-compute.kinship(geneal$geneal, geneal$ped)
mat_kinship <- res_kinship$kinshipMatrix
plotMyMatrix(mat_kinship)
save(simulatedHerds,inBreeding,res_kinship, file='resSimu/res_simu_with_kinship_independantHerds.Rdata')
ram.Network <- diag(0,n.herds)
ram.Network[,1] <- 1
#ram.Network[n.herds,1] <- 0
#ram.Network[n.herds,n.herds] <- 1
herds.Network = list(ewe.replace= NULL,ram.replace = ram.Network)
plot(graph_from_adjacency_matrix(t(ram.Network), mode = c("directed")))
#------------- Simulation
simulatedHerds <- Simulate.herds(n.herds,n.generations,param.allHerds = param,herds.Network = herds.Network,LHerds = NULL)
LHerds <- simulatedHerds$LHerds
geneal<- compute.geneal(LHerds)
#---------- InBreeding
inBreeding <- compute.inbreeding(geneal$geneal, geneal$ped)
ggplot(inBreeding,aes(x=inBreed)) + geom_histogram()
ggplot(inBreeding,aes(col=herd,y=inBreed,x=herd)) + geom_boxplot() + ggtitle('Star network ')
#---------------- Kinship and analyzis
res_kinship <- compute.kinship(geneal$geneal, geneal$ped)
mat_kinship <- res_kinship$kinshipMatrix
plotMyMatrix(mat_kinship)
res_SBM_kinship <- estimateSimpleSBM(mat_kinship,model='gaussian')
save(simulatedHerds,inBreeding,res_kinship,res_SBM_kinship,  file='resSimu/res_simu_with_kinship_starHerds.Rdata')
set.seed(1)
test  = TRUE
while(test){
ram.Network <- matrix(sample(c(0,1),(n.herds)^2,replace=TRUE,prob = c(9/10,1/10)),(n.herds),(n.herds))
diag(ram.Network) <- 0
#ram.Network[1,] <- ram.Network[,1] <- 0
#ram.Network[1,1] <- 1
test  = sum((rowSums(ram.Network)==0)) >0
}
plot(graph_from_adjacency_matrix(t(ram.Network), mode = c("directed")),main = "Ram")
herds.Network = list(ram.replace = ram.Network, ewe.replace =NULL)
simulatedHerds  <- Simulate.herds(n.herds ,n.generations,param.allHerds = param,herds.Network)
LHerds <- simulatedHerds$LHerds
geneal<- compute.geneal(LHerds)
inBreeding <- compute.inbreeding(geneal$geneal, geneal$ped)
ggplot(inBreeding,aes(x=inBreed)) + geom_histogram()
ggplot(inBreeding,aes(col=herd,y=inBreed,x=herd)) + geom_boxplot() + ggtitle('Erdos')
res_kinship <- compute.kinship(geneal$geneal, geneal$ped)
rm(list=ls())
source('functions/modules_simulation.R')
source('functions/complete_simulation.R')
library(igraph,ggplot2)
library(tidyverse)
library(sbm)
######  General parameters #################
n.herds  <- 5#Nb de troupeaux
n.generations <- 50 # Nb de générations
# Parameters
param.default <- list(n.ram = 2,
n.ewe = 40,
age.max.repro.ram = 8,
age.max.repro.ewe = 8,
age.min.repro.ewe = 3,
age.min.repro.ram = 1,
career.ram  = 3)
param.default$rate.repro = as.data.frame(cbind(c(0,1,2),c(0,1,0)))
names(param.default$rate.repro) = c('nb.lambs','probability')
param = lapply(1:n.herds,function(i) param.default) # here same parameters for all the Herds.
ram.Network <- diag(1,n.herds)
plot(graph_from_adjacency_matrix(ram.Network, mode = c("directed")))
herds.Network = list(ewe.replace= NULL,ram.replace = ram.Network,ram.circulation = NULL)
# Simulation
myparam <- param
myparam[[1]]$career.ram = 3
param.allHerds <- myparam
load(file='resSimu/res_simu_with_kinship_independantHerds.Rdata')
ggplot(inBreeding,aes(x=inBreed)) + geom_histogram()
ggplot(inBreeding,aes(col=herd,y=inBreed,x=herd)) + geom_boxplot() + ggtitle('independant ')
mat_kinship <- res_kinship$kinshipMatrix
plotMyMatrix(mat_kinship)
mat_kinship
#######################################################################"
#################" SIMULATION 2 : Hub : one people gives to all the others
#######################################################################"
ram.Network <- diag(0,n.herds)
ram.Network[,1] <- 1
#ram.Network[n.herds,1] <- 0
#ram.Network[n.herds,n.herds] <- 1
herds.Network = list(ewe.replace= NULL,ram.replace = ram.Network)
plot(graph_from_adjacency_matrix(t(ram.Network), mode = c("directed")))
#------------- Simulation
#simulatedHerds <- Simulate.herds(n.herds,n.generations,param.allHerds = param,herds.Network = herds.Network,LHerds = NULL)
LHerds <- simulatedHerds$LHerds
geneal<- compute.geneal(LHerds)
#inBreeding <- compute.inbreeding(geneal$geneal, geneal$ped)
ggplot(inBreeding,aes(x=inBreed)) + geom_histogram()
#inBreeding <- compute.inbreeding(geneal$geneal, geneal$ped)
ggplot(inBreeding,aes(x=inBreed)) + geom_histogram()
ggplot(inBreeding,aes(col=herd,y=inBreed,x=herd)) + geom_boxplot() + ggtitle('Star network ')
#res_kinship <- compute.kinship(geneal$geneal, geneal$ped)
mat_kinship <- res_kinship$kinshipMatrix
plotMyMatrix(mat_kinship)
load(file='resSimu/res_simu_with_kinship_starHerds.Rdata')
ram.Network <- diag(0,n.herds)
ram.Network[,1] <- 1
#ram.Network[n.herds,1] <- 0
#ram.Network[n.herds,n.herds] <- 1
herds.Network = list(ewe.replace= NULL,ram.replace = ram.Network)
plot(graph_from_adjacency_matrix(t(ram.Network), mode = c("directed")))
load(file='resSimu/res_simu_with_kinship_starHerds.Rdata')
#------------- Simulation
#simulatedHerds <- Simulate.herds(n.herds,n.generations,param.allHerds = param,herds.Network = herds.Network,LHerds = NULL)
LHerds <- simulatedHerds$LHerds
geneal<- compute.geneal(LHerds)
#inBreeding <- compute.inbreeding(geneal$geneal, geneal$ped)
ggplot(inBreeding,aes(x=inBreed)) + geom_histogram()
ggplot(inBreeding,aes(col=herd,y=inBreed,x=herd)) + geom_boxplot() + ggtitle('Star network ')
#res_kinship <- compute.kinship(geneal$geneal, geneal$ped)
mat_kinship <- res_kinship$kinshipMatrix
plotMyMatrix(mat_kinship)
wm <- which.max(res_SBM_kinship$storedModels$ICL)
res_SBM_kinship$setModel(wm)
plot(res_SBM_kinship)
blocks <- res_SBM_kinship$memberships
names(blocks) <- rownames(mat_kinship)
u <- which(geneal$ped$herd!=-1)
herds <- geneal$ped$herd[u]
id_present <- geneal$ped[u,]$ind
length(herds)
plotMyMatrix(table(herds,blocks),dimLabels = c('Herds','Blocks'),plotOptions=list(legend = TRUE))
plotAlluvial(list(herds = herds, blocks=blocks))
plot(res_SBM_kinship)
plotMyMatrix(mat_kinship)
plot(res_SBM_kinship)
plotMyMatrix(mat_kinship)
res_SBM_kinship$setModel(wm)
plot(res_SBM_kinship)
wm
blocks <- res_SBM_kinship$memberships
names(blocks) <- rownames(mat_kinship)
u <- which(geneal$ped$herd!=-1)
herds <- geneal$ped$herd[u]
id_present <- geneal$ped[u,]$ind
length(herds)
plotMyMatrix(table(herds,blocks),dimLabels = c('Herds','Blocks'),plotOptions=list(legend = TRUE))
plotAlluvial(list(herds = herds, blocks=blocks))
plotMyMatrix(table(herds,blocks),dimLabels = c('Herds','Blocks'),plotOptions=list(legend = TRUE))
table(herds,blocks)
#######################################################################"
#################" SIMULATION 3 : random network
#######################################################################"
set.seed(1)
test  = TRUE
while(test){
ram.Network <- matrix(sample(c(0,1),(n.herds)^2,replace=TRUE,prob = c(9/10,1/10)),(n.herds),(n.herds))
diag(ram.Network) <- 0
#ram.Network[1,] <- ram.Network[,1] <- 0
#ram.Network[1,1] <- 1
test  = sum((rowSums(ram.Network)==0)) >0
}
plot(graph_from_adjacency_matrix(t(ram.Network), mode = c("directed")),main = "Ram")
herds.Network = list(ram.replace = ram.Network, ewe.replace =NULL)
load(file='resSimu/res_simu_with_kinship_ErdosHerds.Rdata')
simulatedHerds  <- Simulate.herds(n.herds ,n.generations,param.allHerds = param,herds.Network)
LHerds <- simulatedHerds$LHerds
geneal<- compute.geneal(LHerds)
inBreeding <- compute.inbreeding(geneal$geneal, geneal$ped)
ggplot(inBreeding,aes(x=inBreed)) + geom_histogram()
ggplot(inBreeding,aes(col=herd,y=inBreed,x=herd)) + geom_boxplot() + ggtitle('Erdos')
res_kinship <- compute.kinship(geneal$geneal, geneal$ped)
rm(list=ls())
source('functions/modules_simulation.R')
install.packages("tidyverse")
install.packages("tidyverse")
