#-------------------  tout le monde prend 1 an
LHerds <- module.aging(LHerds,param.allHerds)
#------------------ reproduction with possibly Ram exchanges
#---- select mothers
Lmothers <- module.select.parents(LHerds, param.allHerds,sex = 'F')
#--- select fathers
Lfathers <- module.select.parents(LHerds, param.allHerds,sex = 'M')
#--- exchange fathers
Lfathers <- module.exchange.ram(Lfathers,ram.for.repro.Network)
#---------- reproduction
Lnewborns <- module.reproduction(Lmothers,Lfathers,num.gen = gen,param.allHerds)
#---------- replace old ewe by newborns
resultsReplaceEwe  <-  module.replace.interHerd(LHerds,Lnewborns ,ExchangeNetwork = ewe.for.replace.Network,param.allHerds,sex = 'F')
LHerds <- resultsReplaceEwe$LHerds
Lnewborns.togive <- resultsReplaceEwe$Lnewborns.togive
#--------- replace ram inter Herds
resultsReplaceRam  <-  module.replace.interHerd(LHerds,Lnewborns.togive ,ExchangeNetwork = ram.for.replace.Network,param.allHerds,sex = 'M')
LHerds <- resultsReplaceRam$LHerds
#------------- size of herds
herds_size <- rbind(herds_size,compute.herds.size(LHerds))
# ----- inBreeding
if(computeInbreeding){
inBreeding_gen <- compute.inbreeding(LHerds)
inBreeding_gen$gen <- gen
inBreeding <- rbind(inBreeding, inBreeding_gen)
}
gen <- gen + 1
#-------------------  tout le monde prend 1 an
LHerds <- module.aging(LHerds,param.allHerds)
#------------------ reproduction with possibly Ram exchanges
#---- select mothers
Lmothers <- module.select.parents(LHerds, param.allHerds,sex = 'F')
#--- select fathers
Lfathers <- module.select.parents(LHerds, param.allHerds,sex = 'M')
#--- exchange fathers
Lfathers <- module.exchange.ram(Lfathers,ram.for.repro.Network)
#---------- reproduction
Lnewborns <- module.reproduction(Lmothers,Lfathers,num.gen = gen,param.allHerds)
#---------- replace old ewe by newborns
resultsReplaceEwe  <-  module.replace.interHerd(LHerds,Lnewborns ,ExchangeNetwork = ewe.for.replace.Network,param.allHerds,sex = 'F')
LHerds <- resultsReplaceEwe$LHerds
Lnewborns.togive <- resultsReplaceEwe$Lnewborns.togive
#--------- replace ram inter Herds
resultsReplaceRam  <-  module.replace.interHerd(LHerds,Lnewborns.togive ,ExchangeNetwork = ram.for.replace.Network,param.allHerds,sex = 'M')
LHerds <- resultsReplaceRam$LHerds
#------------- size of herds
herds_size <- rbind(herds_size,compute.herds.size(LHerds))
# ----- inBreeding
if(computeInbreeding){
inBreeding_gen <- compute.inbreeding(LHerds)
inBreeding_gen$gen <- gen
inBreeding <- rbind(inBreeding, inBreeding_gen)
}
gen <- gen + 1
#-------------------  tout le monde prend 1 an
LHerds <- module.aging(LHerds,param.allHerds)
#------------------ reproduction with possibly Ram exchanges
#---- select mothers
Lmothers <- module.select.parents(LHerds, param.allHerds,sex = 'F')
#--- select fathers
Lfathers <- module.select.parents(LHerds, param.allHerds,sex = 'M')
#--- exchange fathers
Lfathers <- module.exchange.ram(Lfathers,ram.for.repro.Network)
#---------- reproduction
Lnewborns <- module.reproduction(Lmothers,Lfathers,num.gen = gen,param.allHerds)
#---------- replace old ewe by newborns
resultsReplaceEwe  <-  module.replace.interHerd(LHerds,Lnewborns ,ExchangeNetwork = ewe.for.replace.Network,param.allHerds,sex = 'F')
LHerds <- resultsReplaceEwe$LHerds
Lnewborns.togive <- resultsReplaceEwe$Lnewborns.togive
#--------- replace ram inter Herds
resultsReplaceRam  <-  module.replace.interHerd(LHerds,Lnewborns.togive ,ExchangeNetwork = ram.for.replace.Network,param.allHerds,sex = 'M')
LHerds <- resultsReplaceRam$LHerds
#------------- size of herds
herds_size <- rbind(herds_size,compute.herds.size(LHerds))
# ----- inBreeding
if(computeInbreeding){
inBreeding_gen <- compute.inbreeding(LHerds)
inBreeding_gen$gen <- gen
inBreeding <- rbind(inBreeding, inBreeding_gen)
}
gen <- gen + 1
#-------------------  tout le monde prend 1 an
LHerds <- module.aging(LHerds,param.allHerds)
#------------------ reproduction with possibly Ram exchanges
#---- select mothers
Lmothers <- module.select.parents(LHerds, param.allHerds,sex = 'F')
#--- select fathers
Lfathers <- module.select.parents(LHerds, param.allHerds,sex = 'M')
#--- exchange fathers
Lfathers <- module.exchange.ram(Lfathers,ram.for.repro.Network)
#---------- reproduction
Lnewborns <- module.reproduction(Lmothers,Lfathers,num.gen = gen,param.allHerds)
#---------- replace old ewe by newborns
resultsReplaceEwe  <-  module.replace.interHerd(LHerds,Lnewborns ,ExchangeNetwork = ewe.for.replace.Network,param.allHerds,sex = 'F')
LHerds <- resultsReplaceEwe$LHerds
Lnewborns.togive <- resultsReplaceEwe$Lnewborns.togive
#--------- replace ram inter Herds
resultsReplaceRam  <-  module.replace.interHerd(LHerds,Lnewborns.togive ,ExchangeNetwork = ram.for.replace.Network,param.allHerds,sex = 'M')
LHerds <- resultsReplaceRam$LHerds
#------------- size of herds
herds_size <- rbind(herds_size,compute.herds.size(LHerds))
# ----- inBreeding
if(computeInbreeding){
inBreeding_gen <- compute.inbreeding(LHerds)
inBreeding_gen$gen <- gen
inBreeding <- rbind(inBreeding, inBreeding_gen)
}
gen <- gen + 1
#-------------------  tout le monde prend 1 an
LHerds <- module.aging(LHerds,param.allHerds)
#------------------ reproduction with possibly Ram exchanges
#---- select mothers
Lmothers <- module.select.parents(LHerds, param.allHerds,sex = 'F')
#--- select fathers
Lfathers <- module.select.parents(LHerds, param.allHerds,sex = 'M')
#--- exchange fathers
Lfathers <- module.exchange.ram(Lfathers,ram.for.repro.Network)
#---------- reproduction
Lnewborns <- module.reproduction(Lmothers,Lfathers,num.gen = gen,param.allHerds)
#---------- replace old ewe by newborns
resultsReplaceEwe  <-  module.replace.interHerd(LHerds,Lnewborns ,ExchangeNetwork = ewe.for.replace.Network,param.allHerds,sex = 'F')
LHerds <- resultsReplaceEwe$LHerds
Lnewborns.togive <- resultsReplaceEwe$Lnewborns.togive
#--------- replace ram inter Herds
resultsReplaceRam  <-  module.replace.interHerd(LHerds,Lnewborns.togive ,ExchangeNetwork = ram.for.replace.Network,param.allHerds,sex = 'M')
LHerds <- resultsReplaceRam$LHerds
#------------- size of herds
herds_size <- rbind(herds_size,compute.herds.size(LHerds))
# ----- inBreeding
if(computeInbreeding){
inBreeding_gen <- compute.inbreeding(LHerds)
inBreeding_gen$gen <- gen
inBreeding <- rbind(inBreeding, inBreeding_gen)
}
gen <- gen + 1
#-------------------  tout le monde prend 1 an
LHerds <- module.aging(LHerds,param.allHerds)
#------------------ reproduction with possibly Ram exchanges
#---- select mothers
Lmothers <- module.select.parents(LHerds, param.allHerds,sex = 'F')
#--- select fathers
Lfathers <- module.select.parents(LHerds, param.allHerds,sex = 'M')
#--- exchange fathers
Lfathers <- module.exchange.ram(Lfathers,ram.for.repro.Network)
#---------- reproduction
Lnewborns <- module.reproduction(Lmothers,Lfathers,num.gen = gen,param.allHerds)
#---------- replace old ewe by newborns
resultsReplaceEwe  <-  module.replace.interHerd(LHerds,Lnewborns ,ExchangeNetwork = ewe.for.replace.Network,param.allHerds,sex = 'F')
LHerds <- resultsReplaceEwe$LHerds
Lnewborns.togive <- resultsReplaceEwe$Lnewborns.togive
#--------- replace ram inter Herds
resultsReplaceRam  <-  module.replace.interHerd(LHerds,Lnewborns.togive ,ExchangeNetwork = ram.for.replace.Network,param.allHerds,sex = 'M')
LHerds <- resultsReplaceRam$LHerds
#------------- size of herds
herds_size <- rbind(herds_size,compute.herds.size(LHerds))
# ----- inBreeding
if(computeInbreeding){
inBreeding_gen <- compute.inbreeding(LHerds)
inBreeding_gen$gen <- gen
inBreeding <- rbind(inBreeding, inBreeding_gen)
}
gen <- gen + 1
#-------------------  tout le monde prend 1 an
LHerds <- module.aging(LHerds,param.allHerds)
#------------------ reproduction with possibly Ram exchanges
#---- select mothers
Lmothers <- module.select.parents(LHerds, param.allHerds,sex = 'F')
#--- select fathers
Lfathers <- module.select.parents(LHerds, param.allHerds,sex = 'M')
#--- exchange fathers
Lfathers <- module.exchange.ram(Lfathers,ram.for.repro.Network)
#---------- reproduction
Lnewborns <- module.reproduction(Lmothers,Lfathers,num.gen = gen,param.allHerds)
#---------- replace old ewe by newborns
resultsReplaceEwe  <-  module.replace.interHerd(LHerds,Lnewborns ,ExchangeNetwork = ewe.for.replace.Network,param.allHerds,sex = 'F')
LHerds <- resultsReplaceEwe$LHerds
Lnewborns.togive <- resultsReplaceEwe$Lnewborns.togive
#--------- replace ram inter Herds
resultsReplaceRam  <-  module.replace.interHerd(LHerds,Lnewborns.togive ,ExchangeNetwork = ram.for.replace.Network,param.allHerds,sex = 'M')
LHerds <- resultsReplaceRam$LHerds
#------------- size of herds
herds_size <- rbind(herds_size,compute.herds.size(LHerds))
# ----- inBreeding
if(computeInbreeding){
inBreeding_gen <- compute.inbreeding(LHerds)
inBreeding_gen$gen <- gen
inBreeding <- rbind(inBreeding, inBreeding_gen)
}
gen <- gen + 1
#-------------------  tout le monde prend 1 an
LHerds <- module.aging(LHerds,param.allHerds)
#------------------ reproduction with possibly Ram exchanges
#---- select mothers
Lmothers <- module.select.parents(LHerds, param.allHerds,sex = 'F')
#--- select fathers
Lfathers <- module.select.parents(LHerds, param.allHerds,sex = 'M')
#--- exchange fathers
Lfathers <- module.exchange.ram(Lfathers,ram.for.repro.Network)
#---------- reproduction
Lnewborns <- module.reproduction(Lmothers,Lfathers,num.gen = gen,param.allHerds)
#---------- replace old ewe by newborns
resultsReplaceEwe  <-  module.replace.interHerd(LHerds,Lnewborns ,ExchangeNetwork = ewe.for.replace.Network,param.allHerds,sex = 'F')
LHerds <- resultsReplaceEwe$LHerds
Lnewborns.togive <- resultsReplaceEwe$Lnewborns.togive
#--------- replace ram inter Herds
resultsReplaceRam  <-  module.replace.interHerd(LHerds,Lnewborns.togive ,ExchangeNetwork = ram.for.replace.Network,param.allHerds,sex = 'M')
LHerds <- resultsReplaceRam$LHerds
#------------- size of herds
herds_size <- rbind(herds_size,compute.herds.size(LHerds))
# ----- inBreeding
if(computeInbreeding){
inBreeding_gen <- compute.inbreeding(LHerds)
inBreeding_gen$gen <- gen
inBreeding <- rbind(inBreeding, inBreeding_gen)
}
gen <- gen + 1
#-------------------  tout le monde prend 1 an
LHerds <- module.aging(LHerds,param.allHerds)
#------------------ reproduction with possibly Ram exchanges
#---- select mothers
Lmothers <- module.select.parents(LHerds, param.allHerds,sex = 'F')
#--- select fathers
Lfathers <- module.select.parents(LHerds, param.allHerds,sex = 'M')
#--- exchange fathers
Lfathers <- module.exchange.ram(Lfathers,ram.for.repro.Network)
#---------- reproduction
Lnewborns <- module.reproduction(Lmothers,Lfathers,num.gen = gen,param.allHerds)
#---------- replace old ewe by newborns
resultsReplaceEwe  <-  module.replace.interHerd(LHerds,Lnewborns ,ExchangeNetwork = ewe.for.replace.Network,param.allHerds,sex = 'F')
LHerds <- resultsReplaceEwe$LHerds
Lnewborns.togive <- resultsReplaceEwe$Lnewborns.togive
#--------- replace ram inter Herds
resultsReplaceRam  <-  module.replace.interHerd(LHerds,Lnewborns.togive ,ExchangeNetwork = ram.for.replace.Network,param.allHerds,sex = 'M')
LHerds <- resultsReplaceRam$LHerds
#------------- size of herds
herds_size <- rbind(herds_size,compute.herds.size(LHerds))
# ----- inBreeding
if(computeInbreeding){
inBreeding_gen <- compute.inbreeding(LHerds)
inBreeding_gen$gen <- gen
inBreeding <- rbind(inBreeding, inBreeding_gen)
}
gen <- gen + 1
#-------------------  tout le monde prend 1 an
LHerds <- module.aging(LHerds,param.allHerds)
#------------------ reproduction with possibly Ram exchanges
#---- select mothers
Lmothers <- module.select.parents(LHerds, param.allHerds,sex = 'F')
#--- select fathers
Lfathers <- module.select.parents(LHerds, param.allHerds,sex = 'M')
#--- exchange fathers
Lfathers <- module.exchange.ram(Lfathers,ram.for.repro.Network)
#---------- reproduction
Lnewborns <- module.reproduction(Lmothers,Lfathers,num.gen = gen,param.allHerds)
#---------- replace old ewe by newborns
resultsReplaceEwe  <-  module.replace.interHerd(LHerds,Lnewborns ,ExchangeNetwork = ewe.for.replace.Network,param.allHerds,sex = 'F')
LHerds <- resultsReplaceEwe$LHerds
Lnewborns.togive <- resultsReplaceEwe$Lnewborns.togive
#--------- replace ram inter Herds
resultsReplaceRam  <-  module.replace.interHerd(LHerds,Lnewborns.togive ,ExchangeNetwork = ram.for.replace.Network,param.allHerds,sex = 'M')
LHerds <- resultsReplaceRam$LHerds
#------------- size of herds
herds_size <- rbind(herds_size,compute.herds.size(LHerds))
# ----- inBreeding
if(computeInbreeding){
inBreeding_gen <- compute.inbreeding(LHerds)
inBreeding_gen$gen <- gen
inBreeding <- rbind(inBreeding, inBreeding_gen)
}
gen <- gen + 1
#-------------------  tout le monde prend 1 an
LHerds <- module.aging(LHerds,param.allHerds)
#------------------ reproduction with possibly Ram exchanges
#---- select mothers
Lmothers <- module.select.parents(LHerds, param.allHerds,sex = 'F')
#--- select fathers
Lfathers <- module.select.parents(LHerds, param.allHerds,sex = 'M')
#--- exchange fathers
Lfathers <- module.exchange.ram(Lfathers,ram.for.repro.Network)
#---------- reproduction
Lnewborns <- module.reproduction(Lmothers,Lfathers,num.gen = gen,param.allHerds)
#---------- replace old ewe by newborns
resultsReplaceEwe  <-  module.replace.interHerd(LHerds,Lnewborns ,ExchangeNetwork = ewe.for.replace.Network,param.allHerds,sex = 'F')
LHerds <- resultsReplaceEwe$LHerds
Lnewborns.togive <- resultsReplaceEwe$Lnewborns.togive
#--------- replace ram inter Herds
resultsReplaceRam  <-  module.replace.interHerd(LHerds,Lnewborns.togive ,ExchangeNetwork = ram.for.replace.Network,param.allHerds,sex = 'M')
LHerds <- resultsReplaceRam$LHerds
#------------- size of herds
herds_size <- rbind(herds_size,compute.herds.size(LHerds))
# ----- inBreeding
if(computeInbreeding){
inBreeding_gen <- compute.inbreeding(LHerds)
inBreeding_gen$gen <- gen
inBreeding <- rbind(inBreeding, inBreeding_gen)
}
gen <- gen + 1
#-------------------  tout le monde prend 1 an
LHerds <- module.aging(LHerds,param.allHerds)
#------------------ reproduction with possibly Ram exchanges
#---- select mothers
Lmothers <- module.select.parents(LHerds, param.allHerds,sex = 'F')
#--- select fathers
Lfathers <- module.select.parents(LHerds, param.allHerds,sex = 'M')
#--- exchange fathers
Lfathers <- module.exchange.ram(Lfathers,ram.for.repro.Network)
#---------- reproduction
Lnewborns <- module.reproduction(Lmothers,Lfathers,num.gen = gen,param.allHerds)
#---------- replace old ewe by newborns
resultsReplaceEwe  <-  module.replace.interHerd(LHerds,Lnewborns ,ExchangeNetwork = ewe.for.replace.Network,param.allHerds,sex = 'F')
LHerds <- resultsReplaceEwe$LHerds
Lnewborns.togive <- resultsReplaceEwe$Lnewborns.togive
#--------- replace ram inter Herds
resultsReplaceRam  <-  module.replace.interHerd(LHerds,Lnewborns.togive ,ExchangeNetwork = ram.for.replace.Network,param.allHerds,sex = 'M')
LHerds <- resultsReplaceRam$LHerds
#------------- size of herds
herds_size <- rbind(herds_size,compute.herds.size(LHerds))
# ----- inBreeding
if(computeInbreeding){
inBreeding_gen <- compute.inbreeding(LHerds)
inBreeding_gen$gen <- gen
inBreeding <- rbind(inBreeding, inBreeding_gen)
}
gen <- gen + 1
#-------------------  tout le monde prend 1 an
LHerds <- module.aging(LHerds,param.allHerds)
#------------------ reproduction with possibly Ram exchanges
#---- select mothers
Lmothers <- module.select.parents(LHerds, param.allHerds,sex = 'F')
#--- select fathers
Lfathers <- module.select.parents(LHerds, param.allHerds,sex = 'M')
#--- exchange fathers
Lfathers <- module.exchange.ram(Lfathers,ram.for.repro.Network)
#---------- reproduction
Lnewborns <- module.reproduction(Lmothers,Lfathers,num.gen = gen,param.allHerds)
#---------- replace old ewe by newborns
resultsReplaceEwe  <-  module.replace.interHerd(LHerds,Lnewborns ,ExchangeNetwork = ewe.for.replace.Network,param.allHerds,sex = 'F')
LHerds <- resultsReplaceEwe$LHerds
Lnewborns.togive <- resultsReplaceEwe$Lnewborns.togive
#--------- replace ram inter Herds
resultsReplaceRam  <-  module.replace.interHerd(LHerds,Lnewborns.togive ,ExchangeNetwork = ram.for.replace.Network,param.allHerds,sex = 'M')
LHerds <- resultsReplaceRam$LHerds
#------------- size of herds
herds_size <- rbind(herds_size,compute.herds.size(LHerds))
# ----- inBreeding
if(computeInbreeding){
inBreeding_gen <- compute.inbreeding(LHerds)
inBreeding_gen$gen <- gen
inBreeding <- rbind(inBreeding, inBreeding_gen)
}
gen <- gen + 1
#-------------------  tout le monde prend 1 an
LHerds <- module.aging(LHerds,param.allHerds)
#------------------ reproduction with possibly Ram exchanges
#---- select mothers
Lmothers <- module.select.parents(LHerds, param.allHerds,sex = 'F')
#--- select fathers
Lfathers <- module.select.parents(LHerds, param.allHerds,sex = 'M')
#--- exchange fathers
Lfathers <- module.exchange.ram(Lfathers,ram.for.repro.Network)
#---------- reproduction
Lnewborns <- module.reproduction(Lmothers,Lfathers,num.gen = gen,param.allHerds)
#---------- replace old ewe by newborns
resultsReplaceEwe  <-  module.replace.interHerd(LHerds,Lnewborns ,ExchangeNetwork = ewe.for.replace.Network,param.allHerds,sex = 'F')
LHerds <- resultsReplaceEwe$LHerds
Lnewborns.togive <- resultsReplaceEwe$Lnewborns.togive
#--------- replace ram inter Herds
resultsReplaceRam  <-  module.replace.interHerd(LHerds,Lnewborns.togive ,ExchangeNetwork = ram.for.replace.Network,param.allHerds,sex = 'M')
LHerds <- resultsReplaceRam$LHerds
#------------- size of herds
herds_size <- rbind(herds_size,compute.herds.size(LHerds))
# ----- inBreeding
if(computeInbreeding){
inBreeding_gen <- compute.inbreeding(LHerds)
inBreeding_gen$gen <- gen
inBreeding <- rbind(inBreeding, inBreeding_gen)
}
gen <- gen + 1
#-------------------  tout le monde prend 1 an
LHerds <- module.aging(LHerds,param.allHerds)
#------------------ reproduction with possibly Ram exchanges
#---- select mothers
Lmothers <- module.select.parents(LHerds, param.allHerds,sex = 'F')
#--- select fathers
Lfathers <- module.select.parents(LHerds, param.allHerds,sex = 'M')
#--- exchange fathers
Lfathers <- module.exchange.ram(Lfathers,ram.for.repro.Network)
#---------- reproduction
Lnewborns <- module.reproduction(Lmothers,Lfathers,num.gen = gen,param.allHerds)
#---------- replace old ewe by newborns
resultsReplaceEwe  <-  module.replace.interHerd(LHerds,Lnewborns ,ExchangeNetwork = ewe.for.replace.Network,param.allHerds,sex = 'F')
LHerds <- resultsReplaceEwe$LHerds
Lnewborns.togive <- resultsReplaceEwe$Lnewborns.togive
#--------- replace ram inter Herds
resultsReplaceRam  <-  module.replace.interHerd(LHerds,Lnewborns.togive ,ExchangeNetwork = ram.for.replace.Network,param.allHerds,sex = 'M')
LHerds <- resultsReplaceRam$LHerds
#------------- size of herds
herds_size <- rbind(herds_size,compute.herds.size(LHerds))
# ----- inBreeding
if(computeInbreeding){
inBreeding_gen <- compute.inbreeding(LHerds)
inBreeding_gen$gen <- gen
inBreeding <- rbind(inBreeding, inBreeding_gen)
}
LHerds
ExchangeNetwork
sex
n.herds <- length(LHerds)
for (i in 1:n.herds){
pop.table.i <- LHerds[[i]]
param.i <- param.allHerds[[i]]
#########################"" test
age.lim.i <- switch(sex,
"M" = param.i$career.ram,
"F" = param.i$career.ewe)
size.i <- switch(sex,
"M" = param.i$n.ram,
"F" = param.i$n.ewe)
w.TooOld.i <- which((pop.table.i$herd != -1) & (pop.table.i$sex == sex) & (pop.table.i$age >= param.i$career.ram))
n.TooOld.i <- length(w.TooOld.i)
n.Lacking.i <-  size.i- sum((pop.table.i$herd != -1) & (pop.table.i$sex == sex))
if ((n.TooOld.i > 0) | (n.Lacking.i>0)){
if (length(n.TooOld.i) >0) {pop.table.i$herd[w.TooOld.i]<- 1}
#### chose donnor using ExchangeNetwork. Exchange.network may be weigthed
prob.i <- ExchangeNetwork[i, ]
prob.i <- prob.i/sum(prob.i)
donnor.i <-sample(1:n.herds,1,prob = prob.i)
#### select young rams
L.i <- Lnewborns.togive[[donnor.i]]
w.i <- which(L.i$sex == sex)
### replace too old rams and update LHerds and newborns to give
if (length(w.i) > 0){
u <- sample(1:length(w.i),min(length(w.i),n.TooOld.i + n.Lacking.i),replace=FALSE)
L.i.given <- L.i[w.i[u],]
Lnewborns.togive[[donnor.i]] <- L.i[-w.i[u],]
L.i.given$herd <- i
pop.table.i <- rbind(pop.table.i,L.i.given)
LHerds[[i]] <- pop.table.i
}
}
}
i =1
pop.table.i <- LHerds[[i]]
pop.table.i
param.i <- param.allHerds[[i]]
#########################"" test
age.lim.i <- switch(sex,
"M" = param.i$career.ram,
"F" = param.i$career.ewe)
size.i <- switch(sex,
"M" = param.i$n.ram,
"F" = param.i$n.ewe)
size.i
w.TooOld.i <- which((pop.table.i$herd != -1) & (pop.table.i$sex == sex) & (pop.table.i$age >= param.i$career.ram))
w.TooOld.i
n.TooOld.i <- length(w.TooOld.i)
n.TooOld.i
n.Lacking.i <-  size.i- sum((pop.table.i$herd != -1) & (pop.table.i$sex == sex))
n.Lacking.i
(pop.table.i$herd != -1) & (pop.table.i$sex == sex)
source('~/WORK_LOCAL/RECHERCHE/TRAVAUX_DE_RECHERCHE/Pierre-MatthieuSalpeteur/pastodivModels/Codes/functions/modules_simulation.R')
source('functions/modules_simulation.R')
source('functions/complete_simulation.R')
library(igraph,ggplot2)
library(tidyverse)
######  General parameters #################
n.generations <- 50 # Nb de générations
# Parameters
param.default <- list(n.ram = 5,
n.ewe = 80,
career.ram = 8,
career.ewe = 8,
age.min.ram = 0,
age.min.ewe = 0,
age.repro.ewe = 3,
age.repro.ram = 1)
param.default$rate.repro = as.data.frame(cbind(c(0,1,2),c(0,1,0)))
names(param.default$rate.repro) = c('nb.lambs','probability')
# Network
n.herds  <- 1 #Nb de troupeaux
param= lapply(1:n.herds,function(i) param.default) # here same parameters for all the Herds.
# Simulation
res <- Simulate.herds(n.herds,n.generations = 50,param.allHerds=param,herds.Network = herds.Network,LHerds=NULL,computeInbreeding  = TRUE)
source('~/WORK_LOCAL/RECHERCHE/TRAVAUX_DE_RECHERCHE/Pierre-MatthieuSalpeteur/pastodivModels/Codes/functions/modules_simulation.R')
source('~/WORK_LOCAL/RECHERCHE/TRAVAUX_DE_RECHERCHE/Pierre-MatthieuSalpeteur/pastodivModels/Codes/functions/modules_simulation.R')
# Simulation
res <- Simulate.herds(n.herds,n.generations = 50,param.allHerds=param,herds.Network = herds.Network,LHerds=NULL,computeInbreeding  = TRUE)
size.i
param.i
# Parameters
param.default <- list(n.ram = 5,
n.ewe = 40,
career.ram = 8,
career.ewe = 8,
age.min.ram = 0,
age.min.ewe = 0,
age.repro.ewe = 3,
age.repro.ram = 1)
param.default$rate.repro = as.data.frame(cbind(c(0,1,2),c(0,1,0)))
names(param.default$rate.repro) = c('nb.lambs','probability')
# Network
n.herds  <- 1 #Nb de troupeaux
param= lapply(1:n.herds,function(i) param.default) # here same parameters for all the Herds.
# Simulation
res <- Simulate.herds(n.herds,n.generations = 50,param.allHerds=param,herds.Network = herds.Network,LHerds=NULL,computeInbreeding  = TRUE)
n.Lacking.i
n.TooOld.i
(pop.table.i$herd != -1) & (pop.table.i$sex == sex)
sum((pop.table.i$herd != -1) & (pop.table.i$sex == sex))
size.i
factorial(99)*factoriel(50)
factorial(99)*factorial(50)
