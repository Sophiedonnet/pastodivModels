obj_function <- function(theta,data_masse,Wero,w,M0 = NULL){
if(is.null(M0)){M0 = 0}
y <- data_masse$masse
t <- data_masse$time
q <- data_masse$rain
mt <- masse(t,q,Dero = theta[1],DaccSimp = theta[2], Wero, w,M0)
fit <- sum((y-mt)^2)
return(fit)
}
res <- optim(par=c(1,1500), fn=obj_function, data_masse = data_masse , Wero = Wero,w = w)
theta_estim <- res$par
plot(data_masse$time,data_masse$masse,type='p',main = ("Comparaison estimation (vert), vérité (mauve)"))
yhat <- masse(dt$time,dt$rain,Dero = theta_estim[1],DaccSimp =theta_estim[2],Wero = Wero,w = w)
lines(dt$time,yhat,col='green')
lines(dt$time,dt$masse,col='purple')
################################# PASSAGE en JAGS
library(rjags)
model_jags <- "
model {
# likelihood
Mt[1] <- M0
for (i in 1:(N-1)){
Mt[i+1] <- ifelse( q[i]==0, (Mt[i]*(1-Dero*(t[i+1]-t[i]))+DaccSimp*(t[i+1]-t[i])) , Mt[i]*(1-Wero*(q[i]**w)*(t[i+1]-t[i])))
y[i] ~ dnorm(Mt[i], tau)
}
# prior
tau <- pow(sigma, -2)
sigma ~ dunif(0,2000)
Dero ~ dunif(0,1)
DaccSimp ~ dunif(1000,2000)
}
"
model1.spec<-textConnection(model_jags)
data_for_Jags = list()
data_for_Jags$y <- data_masse$masse
data_for_Jags$t <- data_masse$time
data_for_Jags$q <- data_masse$rain
data_for_Jags$w <- w
data_for_Jags$Wero <- Wero
data_for_Jags$N <- length(data_masse$masse)
data_for_Jags$M0 <- 0
iterations <- 100000
burnin <- 1000
total <- iterations + burnin
chains <- 5
param.inits <- lapply(1:chains,function(c){
u <- list()
u$tau <- runif(0,2000)
u$Dero <- runif(0,1)
u$DaccSimp <- runif(0,2000)
u
}
)
myJAGSmodel <- jags.model(model1.spec, data=data_for_Jags,inits=param.inits, n.chains = chains,n.adapt = 1000)
update(myJAGSmodel,burnin)
model.samples <- coda.samples(myJAGSmodel, variable.names = c("sigma", "Dero","DaccSimp"), n.iter= iterations ,thin = 100)
param.inits <- lapply(1:chains,function(c){
u <- list()
u$sigma <- runif(0,2000)
u$Dero <- runif(0,1)
u$DaccSimp <- runif(0,2000)
u
}
)
myJAGSmodel <- jags.model(model1.spec, data=data_for_Jags,inits=param.inits, n.chains = chains,n.adapt = 1000)
library(ggplot2)
##################  Time
t1 <- seq(0,19)
t2 <- seq(20,40)
t <- c(t1,t2)
############### Pluie
q <- c(rep(0,length(t1)),rep(4,length(t2)))
############## Paramètres
Dero <- 0.098
DaccSimp <- 7.15*186
Wero <- 0.049
w <- 1.3
M0 <- 0
######################## fonction
masse <- function(t,q,Dero,DaccSimp, Wero, w,M0 = NULL){
if(is.null(M0)){M0 = 0}
stopifnot(length(t) == length(q))
Mt <- rep(M0,length(t))
for (i in 1:(length(t)-1)){
Mt[i+1] <- ifelse( q[i]==0, (Mt[i]*(1-Dero*(t[i+1]-t[i]))+DaccSimp*(t[i+1]-t[i])) , Mt[i]*(1-Wero*(q[i]**w)*(t[i+1]-t[i])))
}
return(Mt)
}
Mt <- masse(t,q,Dero,DaccSimp, Wero, w,M0)
dt <- as.data.frame(cbind(t,Mt))
names(dt) <- c('time','masse')
dt$rain <-q
ggplot(dt,aes(x=time,y=masse))+geom_line()
################ Simulation data
y <- Mt +rnorm(length(Mt),0,1000)
u <- seq(0,length(t),by = 1)
data_masse <-as.data.frame(cbind(t[u],y[u]))
names(data_masse) <- c('time','masse')
data_masse$rain <- q[u]
plot(data_masse$time,data_masse$masse,type='p',main = ("Simulation de la masse de polluant sur le bassin versant du Marais"))
lines(dt$time,dt$masse,col='red')
########### on estime Dero et DaccSimp,  on fixe les autres
# fonction à minimiser
obj_function <- function(theta,data_masse,Wero,w,M0 = NULL){
if(is.null(M0)){M0 = 0}
y <- data_masse$masse
t <- data_masse$time
q <- data_masse$rain
mt <- masse(t,q,Dero = theta[1],DaccSimp = theta[2], Wero, w,M0)
fit <- sum((y-mt)^2)
return(fit)
}
#comparaison estimation / vérité
res <- optim(par=c(1,1500), fn=obj_function, data_masse = data_masse , Wero = Wero,w = w)
theta_estim <- res$par
plot(data_masse$time,data_masse$masse,type='p',main = ("Comparaison estimation (vert), vérité (mauve)"))
yhat <- masse(dt$time,dt$rain,Dero = theta_estim[1],DaccSimp =theta_estim[2],Wero = Wero,w = w)
lines(dt$time,yhat,col='green')
lines(dt$time,dt$masse,col='purple')
################################# PASSAGE en JAGS
library(rjags)
model_jags <- "
model {
# likelihood
Mt[1] <- M0
for (i in 1:(N-1)){
Mt[i+1] <- ifelse( q[i]==0, (Mt[i]*(1-Dero*(t[i+1]-t[i]))+DaccSimp*(t[i+1]-t[i])) , Mt[i]*(1-Wero*(q[i]**w)*(t[i+1]-t[i])))
y[i] ~ dnorm(Mt[i], tau)
}
# prior
tau <- pow(sigma, -2)
sigma ~ dunif(0,2000)
Dero ~ dunif(0,1)
DaccSimp ~ dunif(1000,2000)
}
"
model1.spec<-textConnection(model_jags)
data_for_Jags = list()
data_for_Jags$y <- data_masse$masse
data_for_Jags$t <- data_masse$time
data_for_Jags$q <- data_masse$rain
data_for_Jags$w <- w
data_for_Jags$Wero <- Wero
data_for_Jags$N <- length(data_masse$masse)
data_for_Jags$M0 <- 0
iterations <- 100000
burnin <- 1000
total <- iterations + burnin
chains <- 5
param.inits <- lapply(1:chains,function(c){
u <- list()
u$sigma <- runif(0,2000)
u$Dero <- runif(0,1)
u$DaccSimp <- runif(0,2000)
u
}
)
myJAGSmodel <- jags.model(model1.spec, data=data_for_Jags,inits=param.inits, n.chains = chains,n.adapt = 1000)
update(myJAGSmodel,burnin)
model.samples <- coda.samples(myJAGSmodel, variable.names = c("sigma", "Dero","DaccSimp"), n.iter= iterations ,thin = 100)
#model.samples <- window(model.samples,start=20100)
summary(model.samples)
library(ggmcmc)
model.samples.gg <- ggs(model.samples)
ggs_traceplot(model.samples.gg)
ggs_autocorrelation(model.samples.gg)
gelman.diag(model.samples)
geweke.diag(model.samples)
ggs_density(model.samples.gg)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(rjags)
library(ggmcmc)
compar <- cbind(c(Dero,DaccSimp),theta_estim)
colnames(compar) <- c('True','Estimated')
compar <- cbind(c(Dero,DaccSimp),theta_estim)
colnames(compar) <- c('True','Estimated')
print(compar)
rownames(compar) <- c('Dero','DaccSimp')
print(compar)
res <- optim(par=c(1,1500), fn=obj_function, data_masse = data_masse , Wero = Wero,w = w)
theta_estim <- res$par
compar <- cbind(c(Dero,DaccSimp),theta_estim)
colnames(compar) <- c('True','Estimated')
rownames(compar) <- c('Dero','DaccSimp')
print(compar)
res <- optim(par=c(1,1500), fn=obj_function, data_masse = data_masse , Wero = Wero,w = w)
theta_estim <- res$par
compar <- cbind(c(Dero,DaccSimp),theta_estim)
colnames(compar) <- c('True','Estimated')
rownames(compar) <- c('Dero','DaccSimp')
print(compar)
model.samples.all<- mcmc(do.call(rbind, model.samples))
model.samples.gg.all <- ggs(model.samples.all)
ggs_histogram(model.samples.gg.all)
model.samples.all
iterations <- 100000
burnin <- 1000
total <- iterations + burnin
chains <- 5
param.inits <- lapply(1:chains,function(c){
u <- list()
u$sigma <- runif(0,2000)
u$Dero <- runif(0,1)
u$DaccSimp <- runif(0,2000)
u$w <- runif(0,2)
u$Wero <-runif(0,1)
u
}
)
myJAGSmodel <- jags.model(model1.spec, data=data_for_Jags,inits=param.inits, n.chains = chains,n.adapt = 1000)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(rjags)
library(ggmcmc)
t1 <- seq(0,19)
t2 <- seq(20,40)
t <- c(t1,t2)
############### Pluie
q <- c(rep(0,length(t1)),rep(4,length(t2)))
############## Paramètres
Dero <- 0.098
DaccSimp <- 7.15*186
Wero <- 0.049
w <- 1.3
M0 <- 0
######################## fonction
masse <- function(t,q,Dero,DaccSimp, Wero, w,M0 = NULL){
if(is.null(M0)){M0 = 0}
stopifnot(length(t) == length(q))
Mt <- rep(M0,length(t))
for (i in 1:(length(t)-1)){
Mt[i+1] <- ifelse( q[i]==0, (Mt[i]*(1-Dero*(t[i+1]-t[i]))+DaccSimp*(t[i+1]-t[i])) , Mt[i]*(1-Wero*(q[i]**w)*(t[i+1]-t[i])))
}
return(Mt)
}
Mt <- masse(t,q,Dero,DaccSimp, Wero, w,M0)
dt <- as.data.frame(cbind(t,Mt,q))
names(dt) <- c('time','masse','rain')
ggplot(dt,aes(x=time,y=masse))+geom_line()
################ Simulation data
y <- Mt +rnorm(length(Mt),0,1000)
u <- seq(0,length(t),by = 2)
data_masse <-as.data.frame(cbind(t[u],y[u],q[u]))
names(data_masse) <- c('time','masse','rain')
plot(data_masse$time,data_masse$masse,type='p',main = ("Simulation de la masse de polluant sur le bassin versant du Marais"))
lines(dt$time,dt$masse,col='red')
obj_function1 <- function(theta,data_masse,Wero,w,M0 = NULL){
if(is.null(M0)){M0 = 0}
y <- data_masse$masse
t <- data_masse$time
q <- data_masse$rain
mt <- masse(t,q,Dero = theta[1],DaccSimp = theta[2], Wero, w,M0)
fit <- sum((y-mt)^2)
return(fit)
}
res <- optim(par=c(1,1500), fn=obj_function1, data_masse = data_masse , Wero = Wero,w = w)
theta_estim <- res$par
compar <- cbind(c(Dero,DaccSimp),theta_estim)
colnames(compar) <- c('True','Estimated')
rownames(compar) <- c('Dero','DaccSimp')
print(compar)
plot(data_masse$time,data_masse$masse,type='p',main = ("Comparaison estimation (vert), vérité (mauve)"))
yhat <- masse(dt$time,dt$rain,Dero = theta_estim[1],DaccSimp =theta_estim[2],Wero = Wero,w = w)
lines(dt$time,yhat,col='green')
lines(dt$time,dt$masse,col='purple')
legend("topleft", legend=c("True curve", "Estimated curve"),
col=c("purple", "green"), lty=1, cex=0.8)
model_jags <- "
model {
# likelihood
Mt[1] <- M0
for (i in 1:(N-1)){
Mt[i+1] <- ifelse( q[i]==0, (Mt[i]*(1-Dero*(t[i+1]-t[i]))+DaccSimp*(t[i+1]-t[i])) , Mt[i]*(1-Wero*(q[i]**w)*(t[i+1]-t[i])))
y[i] ~ dnorm(Mt[i], tau)
}
# prior
tau <- pow(sigma, -2)
sigma ~ dunif(500,2000)
Dero ~ dunif(0,1)
DaccSimp ~ dunif(1000,2000)
w ~ dunif(0,2)
Wero ~ dunif(0,1)
}
"
model1.spec<-textConnection(model_jags)
data_for_Jags = list()
data_for_Jags$y <- data_masse$masse
data_for_Jags$t <- data_masse$time
data_for_Jags$q <- data_masse$rain
#data_for_Jags$w <- w
#data_for_Jags$Wero <- Wero
data_for_Jags$N <- length(data_masse$masse)
data_for_Jags$M0 <- 0
iterations <- 100000
burnin <- 1000
total <- iterations + burnin
chains <- 5
param.inits <- lapply(1:chains,function(c){
u <- list()
u$sigma <- runif(0,2000)
u$Dero <- runif(0,1)
u$DaccSimp <- runif(0,2000)
u$w <- runif(0,2)
u$Wero <-runif(0,1)
u
}
)
myJAGSmodel <- jags.model(model1.spec, data=data_for_Jags,inits=param.inits, n.chains = chains,n.adapt = 1000)
update(myJAGSmodel,burnin)
model.samples <- coda.samples(myJAGSmodel, variable.names = c("sigma", "Dero","DaccSimp","w","Wero"), n.iter= iterations ,thin = 100)
#model.samples <- window(model.samples,start=20100)
summary(model.samples)
model.samples.all<- mcmc(do.call(rbind, model.samples))
model.samples.gg.all <- ggs(model.samples.all)
ggs_histogram(model.samples.gg.all)
model.samples.all
apply(model.samples.all,2,mean)
theta_post_mean <- apply(model.samples.all,2,mean)
theta_post_mean['Wero']
theta_post_mean <- apply(model.samples.all,2,mean)
yhat_post <- masse(dt$time,dt$rain,Dero = theta_post_mean['Dero'],DaccSimp =theta_post_mean['DaccSimp'],Wero = heta_post_mean['Wero'],w = heta_post_mean['w'])
yhat_post <- masse(dt$time,dt$rain,Dero = theta_post_mean['Dero'],DaccSimp =theta_post_mean['DaccSimp'],Wero = heta_post_mean['Wero'],w = theta_post_mean['w'])
yhat_post <- masse(dt$time,dt$rain,Dero = theta_post_mean['Dero'],DaccSimp =theta_post_mean['DaccSimp'],Wero = theta_post_mean['Wero'],w = theta_post_mean['w'])
theta_post_mean <- apply(model.samples.all,2,mean)
yhat_post <- masse(dt$time,dt$rain,Dero = theta_post_mean['Dero'],DaccSimp =theta_post_mean['DaccSimp'],Wero = theta_post_mean['Wero'],w = theta_post_mean['w'])
plot(data_masse$time,data_masse$masse,type='p',main = ("Comparaison estimation (vert), vérité (mauve)"))
lines(dt$time,yhat_post,col='green')
lines(dt$time,dt$masse,col='purple')
legend("topleft", legend=c("True curve", "Estimated curve"),
col=c("purple", "green"), lty=1, cex=0.8)
source('functions/modules_simulation.R')
source('functions/complete_simulation.R')
library(igraph)
library(ggplot2)
library(dplyr)
library(plyr)
n.herds  <- 10 #Nb de troupeaux
n.generations <- 50 # Nb de générations
# Parameters
param.default <- list(n.ram = 2,
n.ewe = 40,
career.ram = 8,
career.ewe = 8,
age.min.ram = 0,
age.min.ewe = 0,
age.repro.ewe = 3,
age.repro.ram = 1)
param.default$rate.repro = as.data.frame(cbind(c(0,1,2),c(0,1,0)))
names(param.default$rate.repro) = c('nb.lambs','probability')
param= lapply(1:n.herds,function(i) param.default) # here same parameters for all the Herds.
# Network
ram.Network <- diag(1,n.herds)
plot(graph_from_adjacency_matrix(ram.Network, mode = c("directed")))
herds.Network = list(ewe= NULL,ram = ram.Network,ram.for.repro = ram.Network)
# Simulation
res <- Simulate.herds(n.herds,n.generations,param.allHerds=param,herds.Network = herds.Network,LHerds=NULL,computeInbreeding  = FALSE)
LHerds <- res$LHerds
# InBreeding
inBreeding <- computeInbreedingFunction(LHerds)
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
U <- ped[,1:3]
U <- U %>% gather(key= 'fam','id')
U$id <- as.factor(U$id)
U$id
U$id <- mapvalues(U$id, from = levels(U$id), to = 1:length(levels(U$id)))
ped$ind <- U$id[U$fam == 'ind']
U$id <- as.numeric(mapvalues(U$id, from = levels(U$id), to = 1:length(levels(U$id))))
ped$ind <- U$id[U$fam == 'ind']
ped$father <- U$id[U$fam == 'father']
ped$mother <- U$id[U$fam == 'mother']
ped$mother <- U$id[U$fam == 'mother']
w.without.knwon.parents
ped$father
w.without.knwon.parents  <-  which(ped$father==1)
ped$father[w.without.knwon.parents] <- 0
ped$mother[w.without.knwon.parents] <- 0
ped$sex <- as.numeric(mapvalues(ped$sex, from = c("M", "F"), to = c(1, 2)))
ped
(
)
geneal <- gen.genealogy(ped)
u <- which(ped$herd!=-1)
u
inBreed <- gen.f(geneal,u)
U <- as.data.frame(cbind(ped$herd[u],inBreed))
names(U) <- c('herd','inBreed')
U
# InBreeding
inBreeding <- computeInbreedingFunction(LHerds)
source('functions/modules_simulation.R')
source('functions/complete_simulation.R')
library(igraph)
library(ggplot2)
library(dplyr)
library(plyr)
######  General parameters #################
n.herds  <- 10 #Nb de troupeaux
n.generations <- 50 # Nb de générations
# Parameters
param.default <- list(n.ram = 2,
n.ewe = 40,
career.ram = 8,
career.ewe = 8,
age.min.ram = 0,
age.min.ewe = 0,
age.repro.ewe = 3,
age.repro.ram = 1)
param.default$rate.repro = as.data.frame(cbind(c(0,1,2),c(0,1,0)))
names(param.default$rate.repro) = c('nb.lambs','probability')
param= lapply(1:n.herds,function(i) param.default) # here same parameters for all the Herds.
#################" SIMULATION 1 : independent herds : no exchange
# Network
ram.Network <- diag(1,n.herds)
plot(graph_from_adjacency_matrix(ram.Network, mode = c("directed")))
herds.Network = list(ewe= NULL,ram = ram.Network,ram.for.repro = ram.Network)
# Simulation
res <- Simulate.herds(n.herds,n.generations,param.allHerds=param,herds.Network = herds.Network,LHerds=NULL,computeInbreeding  = FALSE)
LHerds <- res$LHerds
# InBreeding
inBreeding <- computeInbreedingFunction(LHerds)
inBreeding$herd <- as.factor(inBreeding$herd)
ggplot(inBreeding,aes(x=inBreed)) + geom_histogram()
ggplot(inBreeding,aes(col=herd,y=inBreed,x=herd)) + geom_boxplot() + ggtitle('independant ')
#################" SIMULATION 2 : Hub : one people gives to all the others
ram.Network <- diag(0,n.herds)
ram.Network[,1] <- 1
ram.Network[n.herds,1] <- 0
ram.Network[n.herds,n.herds] <- 1
plot(graph_from_adjacency_matrix(t(ram.Network), mode = c("directed")))
herds.Network = list(ewe= NULL,ram = ram.Network,ram.for.repro = ram.Network)
# Simulation
LHerds <- Simulate.herds(n.herds,n.generations,param.allHerds = param,herds.Network)
# InBreeding
inBreeding <- computeInbreedingFunction(LHerds)
inBreeding$herd <- as.factor(inBreeding$herd)
ggplot(inBreeding,aes(x=inBreed)) + geom_histogram()
ggplot(inBreeding,aes(col=herd,y=inBreed,x=herd)) + geom_boxplot() +   ggtitle('Hub network')
#################" SIMULATION 3 : random network
set.seed(1)
test  = TRUE
while(test){
ram.Network <- matrix(sample(c(0,1),(n.herds)^2,replace=TRUE,prob = c(9/10,1/10)),(n.herds),(n.herds))
diag(ram.Network) <- 0
ram.Network[1,] <- ram.Network[,1] <- 0
ram.Network[1,1] <- 1
test  = sum((rowSums(ram.Network)==0)) >0
}
plot(graph_from_adjacency_matrix(t(ram.Network), mode = c("directed")))
herds.Network = list(ewe= NULL,ram = ram.Network,ram.for.repro = NULL)
LHerds <- Simulate.herds(n.herds ,n.generations,param.allHerds = param,herds.Network)
inBreeding <- computeInbreedingFunction(LHerds)
inBreeding$herd <- as.factor(inBreeding$herd)
ggplot(inBreeding,aes(col=herd,y=inBreed,x=herd)) + geom_boxplot()  + ggtitle('Random network')
#################" SIMULATION 4 :  chain
ram.Network <- diag(0,n.herds)
for (i in 2:n.herds){
ram.Network[i,i-1] <- 1
}
ram.Network[1,n.herds-1] <- 1
ram.Network[n.herds,n.herds-1] <- 0
ram.Network[n.herds,n.herds] <- 1
herds.Network = list(ewe= NULL,ram = ram.Network,ram.for.repro = NULL)
plot(graph_from_adjacency_matrix(t(ram.Network), mode = c("directed")))
LHerds <- Simulate.herds(n.herds ,n.generations,param.allHerds = param,herds.Network)
inBreeding <- computeInbreedingFunction(LHerds)
inBreeding$herd <- as.factor(inBreeding$herd)
ggplot(inBreeding,aes(col=herd,y=inBreed,x=herd)) + geom_boxplot()+ ggtitle('Chain network')
#################" SIMULATION 5 :  complete network
ram.Network <- matrix(1,n.herds,n.herds)
ram.Network[,1] <- ram.Network[1,] <- 0
ram.Network[1,1] <- 1
plot(graph_from_adjacency_matrix(t(ram.Network), mode = c("directed")))
LHerds <- Simulate.herds(n.herds ,n.generations,param.allHerds = param,herds.Network)
inBreeding <- computeInbreedingFunction(LHerds)
inBreeding$herd <- as.factor(inBreeding$herd)
ggplot(inBreeding,aes(col=herd,y=inBreed,x=herd)) + geom_boxplot()+ ggtitle('Chain network')
#################" SIMULATION 6 :  change size of one herd
param[[1]]$n.ram = 6
param[[1]]$n.ewe = 120
ram.Network <- diag(0,n.herds)
ram.Network[,1] <- 1
ram.Network[n.herds,1] <- 0
ram.Network[n.herds,n.herds] <- 1
plot(graph_from_adjacency_matrix(t(ram.Network), mode = c("directed")))
# Simulation
LHerds <- Simulate.herds(n.herds,n.generations,param.allHerds = param,herds.Network)
# InBreeding
inBreeding <- computeInbreedingFunction(LHerds)
inBreeding$herd <- as.factor(inBreeding$herd)
ggplot(inBreeding,aes(x=inBreed)) + geom_histogram()
ggplot(inBreeding,aes(col=herd,y=inBreed,x=herd)) + geom_boxplot() +   ggtitle('Hub network')
U <- as.data.frame(ped[,1:3])
U <- U %>% gather(key= 'fam','id')
U$id <- as.factor(U$id)
U$id <- as.numeric(mapvalues(U$id, from = levels(U$id), to = 1:length(levels(U$id))))
ped$ind <- U$id[U$fam == 'ind']
ped$father <- U$id[U$fam == 'father']
ped$mother <- U$id[U$fam == 'mother']
w.without.knwon.parents  <-  which(ped$father==1)
ped$father[w.without.knwon.parents] <- 0
ped$mother[w.without.knwon.parents] <- 0
ped$sex <- as.numeric(mapvalues(ped$sex, from = c("M", "F"), to = c(1, 2)))
geneal <- gen.genealogy(ped)
u <- which(ped$herd!=-1)
inBreed <- gen.f(geneal,u)
U <- as.data.frame(cbind(ped$herd[u],inBreed))
names(U) <- c('herd','inBreed')
