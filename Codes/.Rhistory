myHerds <- Simulate.herds(n.herds,n.generations,param.allHerds=NULL,herds.Network)
myHerds <- Simulate.herds(n.herds,n.generations,param.allHerds=NULL,herds.Network)
myHerds <- Simulate.herds(n.herds,n.generations,param.allHerds=NULL,herds.Network)
param.allHerds=NULL
herds.Network
n.generations
n.herds
if(is.null(param.allHerds)){
param.default <- list(n.ram = 2,
n.ewe = 40,
career.ram = 8,
age.min.ram=0,
career.ewe = 8,
age.min.ewe = 0,
age.repro.ewe = 3,
age.repro.ram = 1
)
param.default$rate.repro = as.data.frame(cbind(c(0,1,2),c(0,1,0)))
names(param.default$rate.repro) = c('nb.lambs','probability')
param.allHerds <- lapply(1:n.herds,function(i){param.default})
}
LHerds = lapply(1:n.herds,function(i){module.initialize.oneHerd(i,param = param.allHerds[[i]])})
LHerds <- lapply(1:n.herds,function(i){module.aging.oneHerd(pop.table = LHerds[[i]],param = param.allHerds[[i]])})
pat <- choose.Ram(herds.Network,n.herds)
pat
n.herds
pat <- choose.Ram(herds.Network,n.herds)
newBorns <- lapply(1:n.herds,function(i){module.reproduction.interHerds(pop.table.ewe = LHerds[[i]],pop.table.ram = do.call("rbind",LHerds[pat[[i]]]),gen,param = param.allHerds[[i]])})
gen = 1
newBorns <- lapply(1:n.herds,function(i){module.reproduction.interHerds(pop.table.ewe = LHerds[[i]],pop.table.ram = do.call("rbind",LHerds[pat[[i]]]),gen,param = param.allHerds[[i]])})
newBorns
resultsReplace <- lapply(1:n.herds,function(i){module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newBorns[[i]],param = param.allHerds[[i]])})
resultsReplace
LHerds <- lapply(1:n.herds,function(i){resultsReplace[[i]]$pop.table})
Lnewborns.togive <- lapply(1:n.herds,function(i){resultsReplace[[i]]$newborn.togive})
for (i in 1:n.herds){
pop.table.i <- LHerds[[i]]
param.i <- param.allHerds[[i]]
w.R.TooOld <- which((pop.table.i$herd != -1) & (pop.table.i$sex=='M') & pop.table.i$age > param.i$age.repro.ram)
n.R.TooOld <- length(w.R.TooOld)
if (n.R.TooOld > 0){
donnor.i <-sample(which(herds.Network[i,]==1),1)
L.i <- Lnewborns.togive[[donnor.i]]
L.i <- L.i[L.i$sex=='M',][sample(1:nrow(L.i),n.R.TooOld,replace=FALSE),]
L.i$herd <- i
pop.table.i$herd[w.R.TooOld]<- -1
pop.table.i <- rbind(pop.table.i,L.i)
LHerds[[i]] <- pop.table.i
}
}
gen = 2
LHerds <- lapply(1:n.herds,function(i){module.aging.oneHerd(pop.table = LHerds[[i]],param = param.allHerds[[i]])})
pat <- choose.Ram(herds.Network,n.herds)
newBorns <- lapply(1:n.herds,function(i){module.reproduction.interHerds(pop.table.ewe = LHerds[[i]],pop.table.ram = do.call("rbind",LHerds[pat[[i]]]),gen,param = param.allHerds[[i]])})
pop.table.ewe = LHerds[[i]]
pop.table.ram = do.call("rbind",LHerds[pat[[i]]])
gen
pop.table.ram
pop.table.ewe
num.gen = 2
########################################################
num.herd <- pop.table.ewe$herd[which(pop.table.ewe$herd != -1)[1]]
num.herd
repro.ewe.table <- pop.table.ewe[(pop.table.ewe$herd != -1) & (pop.table.ewe$sex == "F") & (pop.table.ewe$age > param.default$age.repro.ewe),] # ewe able to do babies
repro.ram.table <- pop.table.ram[(pop.table.ram$herd != -1) & (pop.table.ram$sex == "M") & (pop.table.ram$age > param.default$age.repro.ram),] # ram able to do babies
n.repro.ewe <- nrow(repro.ewe.table)             # nbre de ewe able to do babies
n.newborns.per.ewe <- sample(param.default$rate.repro[,1],n.repro.ewe,replace = TRUE,prob  = param.default$rate.repro[,2]) # nb of newborns per ewe.
n.newborns <- sum(n.newborns.per.ewe)
# creation table newborn
newborn.table <- as.data.frame(matrix(data = NA, nrow = n.newborns , ncol=ncol(pop.table.ewe)))
colnames(newborn.table) <- colnames(pop.table.ewe)
# fullfilling newborn.table
newborn.table$id=paste(num.gen,num.herd,1:n.newborns,sep="-")
newborn.table$age <- 0
newborn.table$sex <- sample(c("F","M"), size = n.newborns, replace = T)
newborn.table$herd <- num.herd;
newborn.table$mother <- rep(repro.ewe.table$id,n.newborns.per.ewe)
possible.father <- repro.ram.table$id # extraction id father :
newborn.table$father <- rep(sample(possible.father,size = n.repro.ewe,replace = T),n.newborns.per.ewe)
possible.father
repro.ram.table
pop.table.ram$herd != -1
which((pop.table.ram$herd != -1) & (pop.table.ram$sex == "M") )
which((pop.table.ram$herd != -1) & (pop.table.ram$sex == "M") & pop.table.ram$age > param.default$age.repro.ram)
pop.table.ram$age
repro.ewe.table <- pop.table.ewe[(pop.table.ewe$herd != -1) & (pop.table.ewe$sex == "F") & (pop.table.ewe$age > param.default$age.repro.ewe),] # ewe able to do babies
repro.ram.table <- pop.table.ram[(pop.table.ram$herd != -1) & (pop.table.ram$sex == "M") & (pop.table.ram$age <= param.default$age.career.ram),] # ram able to do babies
n.repro.ewe <- nrow(repro.ewe.table)             # nbre de ewe able to do babies
n.newborns.per.ewe <- sample(param.default$rate.repro[,1],n.repro.ewe,replace = TRUE,prob  = param.default$rate.repro[,2]) # nb of newborns per ewe.
n.newborns <- sum(n.newborns.per.ewe)
# creation table newborn
newborn.table <- as.data.frame(matrix(data = NA, nrow = n.newborns , ncol=ncol(pop.table.ewe)))
colnames(newborn.table) <- colnames(pop.table.ewe)
# fullfilling newborn.table
newborn.table$id=paste(num.gen,num.herd,1:n.newborns,sep="-")
newborn.table$age <- 0
newborn.table$sex <- sample(c("F","M"), size = n.newborns, replace = T)
newborn.table$herd <- num.herd;
newborn.table$mother <- rep(repro.ewe.table$id,n.newborns.per.ewe)
possible.father <- repro.ram.table$id # extraction id father :
newborn.table$father <- rep(sample(possible.father,size = n.repro.ewe,replace = T),n.newborns.per.ewe)
source('functions/modules_simulation.R')
# fonction generale
n.herds  <- 10
herds.Network <- matrix(sample(c(0,1),n.herds^2,replace=TRUE,prob = c(2/3,1/3)),n.herds,n.herds)
diag(herds.Network) <- 0
n.generations <- 1
myHerds <- Simulate.herds(n.herds,n.generations,param.allHerds=NULL,herds.Network)
n.generations <- 2
myHerds <- Simulate.herds(n.herds,n.generations,param.allHerds=NULL,herds.Network)
source('functions/modules_simulation.R')
# fonction generale
n.herds  <- 10
herds.Network <- matrix(sample(c(0,1),n.herds^2,replace=TRUE,prob = c(2/3,1/3)),n.herds,n.herds)
diag(herds.Network) <- 0
n.generations <- 2
myHerds <- Simulate.herds(n.herds,n.generations,param.allHerds=NULL,herds.Network)
myHerds
n.generations <- 1
myHerds <- Simulate.herds(n.herds,n.generations,param.allHerds=NULL,herds.Network)
myHerds
source('functions/modules_simulation.R')
# fonction generale
n.herds  <- 10
herds.Network <- matrix(sample(c(0,1),n.herds^2,replace=TRUE,prob = c(2/3,1/3)),n.herds,n.herds)
diag(herds.Network) <- 0
n.generations <- 1
myHerds <- Simulate.herds(n.herds,n.generations,param.allHerds=NULL,herds.Network)
myHerds
install.packages("torch")
library(torch)
source('functions/modules_simulation.R')
# fonction generale
n.herds  <- 10
herds.Network <- matrix(sample(c(0,1),n.herds^2,replace=TRUE,prob = c(2/3,1/3)),n.herds,n.herds)
diag(herds.Network) <- 0
n.generations <- 1
myHerds <- Simulate.herds(n.herds,n.generations,param.allHerds=NULL,herds.Network)
myHerds
source('functions/modules_simulation.R')
# fonction generale
n.herds  <- 10
herds.Network <- matrix(sample(c(0,1),n.herds^2,replace=TRUE,prob = c(2/3,1/3)),n.herds,n.herds)
diag(herds.Network) <- 0
param.allHerds=NULL
source('functions/modules_simulation.R')
# fonction generale
n.herds  <- 10
herds.Network <- matrix(sample(c(0,1),n.herds^2,replace=TRUE,prob = c(2/3,1/3)),n.herds,n.herds)
diag(herds.Network) <- 0
n.generations <- 1
myHerds <- Simulate.herds(n.herds,n.generations,param.allHerds=NULL,herds.Network)
if(is.null(param.allHerds)){
param.default <- list(n.ram = 2,
n.ewe = 40,
career.ram = 8,
age.min.ram=0,
career.ewe = 8,
age.min.ewe = 0,
age.repro.ewe = 3,
age.repro.ram = 1
)
param.default$rate.repro = as.data.frame(cbind(c(0,1,2),c(0,1,0)))
names(param.default$rate.repro) = c('nb.lambs','probability')
param.allHerds <- lapply(1:n.herds,function(i){param.default})
}
LHerds = lapply(1:n.herds,function(i){module.initialize.oneHerd(i,param = param.allHerds[[i]])})
LHerds
gen = 1
LHerds <- lapply(1:n.herds,function(i){module.aging.oneHerd(pop.table = LHerds[[i]],param = param.allHerds[[i]])})
LHerds
pat <- choose.Ram.reproduction(herds.Network,n.herds)
pat
newBorns <- lapply(1:n.herds,function(i){module.reproduction(pop.table.ewe = LHerds[[i]],pop.table.ram = do.call("rbind",LHerds[pat[[i]]]),gen,param = param.allHerds[[i]])})
newBorns
resultsReplace <- lapply(1:n.herds,function(i){module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newBorns[[i]],param = param.allHerds[[i]])})
resultsReplace <- lapply(1:n.herds,function(i){module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newBorns[[i]],param = param.allHerds[[i]])})
resultsReplace
resultsRepace
resultsReplace[[1]]
source('functions/modules_simulation.R')
# fonction generale
n.herds  <- 10
herds.Network <- matrix(sample(c(0,1),n.herds^2,replace=TRUE,prob = c(2/3,1/3)),n.herds,n.herds)
diag(herds.Network) <- 0
n.generations <- 1
myHerds <- Simulate.herds(n.herds,n.generations,param.allHerds=NULL,herds.Network)
myHerds
param.default <- list(n.ram = 2,
n.ewe = 40,
career.ram = 8,
age.min.ram=0,
career.ewe = 8,
age.min.ewe = 0,
age.repro.ewe = 3,
age.repro.ram = 1
)
param.default$rate.repro = as.data.frame(cbind(c(0,1,2),c(0,1,0)))
names(param.default$rate.repro) = c('nb.lambs','probability')
param.allHerds <- lapply(1:n.herds,function(i){param.default})
n.herds
LHerds = lapply(1:n.herds,function(i){module.initialize.oneHerd(i,param = param.allHerds[[i]])})
LHerds
LHerds <- lapply(1:n.herds,function(i){module.initialize.oneHerd(i,param = param.allHerds[[i]])})
gen  =1
LHerds2 <- lapply(1:n.herds,function(i){module.aging.oneHerd(pop.table = LHerds[[i]],param = param.allHerds[[i]])})
LHerds2
LHerds1
LHerds
LHerds <- lapply(1:n.herds,function(i){module.aging.oneHerd(pop.table = LHerds[[i]],param = param.allHerds[[i]])})
pat <- choose.Ram.reproduction(herds.Network,n.herds)
pat
fathers <- choose.Ram.reproduction(herds.Network,n.herds)
pop.table.ram <- do.call("rbind",LHerds[fathers[[i]]])
pop.table.ram
pop.table.ram <- lapply(1:n.herds,function(i){do.call("rbind",LHerds[fathers[[i]]])}
newBorns <- lapply(1:n.herds,function(i){module.reproduction(pop.table.ewe = LHerds[[i]],pop.table.ram = ,gen,param = param.allHerds[[i]])})
resultsReplace <- lapply(1:n.herds,function(i){module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newBorns[[i]],param = param.allHerds[[i]])})
LHerds <- lapply(1:n.herds,function(i){resultsReplace[[i]]$pop.table})
Lnewborns.togive <- lapply(1:n.herds,function(i){resultsReplace[[i]]$newborn.togive})
for (i in 1:n.herds){
pop.table.i <- LHerds[[i]]
param.i <- param.allHerds[[i]]
w.R.TooOld <- which((pop.table.i$herd != -1) & (pop.table.i$sex=='M') & pop.table.i$age > param.i$age.repro.ram)
n.R.TooOld <- length(w.R.TooOld)
if (n.R.TooOld > 0){
donnor.i <-sample(which(herds.Network[i,]==1),1)
L.i <- Lnewborns.togive[[donnor.i]]
L.i <- L.i[L.i$sex=='M',][sample(1:nrow(L.i),n.R.TooOld,replace=FALSE),]
L.i$herd <- i
pop.table.i$herd[w.R.TooOld]<- -1
pop.table.i <- rbind(pop.table.i,L.i)
LHerds[[i]] <- pop.table.i
}
}
}
return(LHerds)
}
pop.table.ram <- lapply(1:n.herds,function(i){do.call("rbind",LHerds[fathers[[i]]])})
pop.table.ram
fathers <- choose.Ram.reproduction(herds.Network,n.herds)
pop.table.ram <- lapply(1:n.herds,function(i){do.call("rbind",LHerds[fathers[[i]]])})
pop.table.ram
LHerds <- lapply(1:n.herds,function(i){module.aging.oneHerd(pop.table = LHerds[[i]],param = param.allHerds[[i]])})
param.default <- list(n.ram = 2,
n.ewe = 40,
career.ram = 8,
age.min.ram=0,
career.ewe = 8,
age.min.ewe = 0,
age.repro.ewe = 3,
age.repro.ram = 1
)
param.default$rate.repro = as.data.frame(cbind(c(0,1,2),c(0,1,0)))
names(param.default$rate.repro) = c('nb.lambs','probability')
param.allHerds <- lapply(1:n.herds,function(i){param.default})
LHerds <- lapply(1:n.herds,function(i){module.initialize.oneHerd(i,param = param.allHerds[[i]])})
LHerds <- lapply(1:n.herds,function(i){module.aging.oneHerd(pop.table = LHerds[[i]],param = param.allHerds[[i]])})
fathers <- choose.Ram.reproduction(herds.Network,n.herds)
pop.table.ram <- lapply(1:n.herds,function(i){do.call("rbind",LHerds[fathers[[i]]])})
pop.table.ram
fathers <- choose.Ram.reproduction(herds.Network,n.herds)
pop.table.ram <- lapply(1:n.herds,function(i){do.call("rbind",LHerds[fathers[[i]]])})
fathers <- choose.Ram.reproduction(herds.Network,n.herds)
pop.table.ram <- lapply(1:n.herds,function(i){do.call("rbind",LHerds[fathers[[i]]])})
newBorns <- lapply(1:n.herds,function(i){module.reproduction(pop.table.ewe = LHerds[[i]],pop.table.ram = pop.table.ram,gen,param = param.allHerds[[i]])})
pop.table.ram <- lapply(1:n.herds,function(i){do.call("rbind",LHerds[fathers[[i]]])})
pop.table.ram
newBorns <- lapply(1:n.herds,function(i){module.reproduction(pop.table.ewe = LHerds[[i]],pop.table.ram = pop.table.ram,gen,param = param.allHerds[[i]])})
newBorns <- lapply(1:n.herds,function(i){module.reproduction(pop.table.ewe = LHerds[[i]],pop.table.ram = pop.table.ram[[i]],gen,param = param.allHerds[[i]])})
newBorns
where.fathers <- choose.Ram.reproduction(herds.Network,n.herds)
pop.table.ram <- lapply(1:n.herds,function(i){do.call("rbind",LHerds[where.fathers[[i]]])})
newBorns <- lapply(1:n.herds,function(i){module.reproduction(pop.table.ewe = LHerds[[i]],pop.table.ram = pop.table.ram[[i]],gen,param = param.allHerds[[i]])})
newBorns
resultsReplace <- lapply(1:n.herds,function(i){module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newBorns[[i]],param = param.allHerds[[i]])})
resultsReplace
i  = 1
pop.table = LHerds[[i]]
newborn.table = newBorns[[i]]
param = param.allHerds[[i]])
param = param.allHerds[[i]]
param.default <- list(n.ram = 2,
n.ewe = 40,
career.ram = 8,
age.min.ram=0,
career.ewe = 8,
age.min.ewe = 0,
age.repro.ewe = 3,
age.repro.ram = 1
)
param.default$rate.repro = as.data.frame(cbind(c(0,1,2),c(0,1,0)))
names(param.default$rate.repro) = c('nb.lambs','probability')
param.default[names(param)] <- param
################"" REPLACE the ewe that are too old.
w.F <- which(newborn.table$sex == 'F')
w.F
w.TooOld <- which(pop.table$herd != -1 & pop.table$sex == 'F' & pop.table$age >= param.default$career.ewe)
w.TooOld
n.TooOld <- length(w.TooOld)
n.TooOld > 0
pop.table$herd[w.TooOld]<- -1
u <- sample(w.F,n.TooOld,replace=FALSE)
pop.table <- rbind(pop.table,newborn.table[u,])
newborn.togive <- newborn.table[-u,]
res <- list(pop.table = pop.table,newborn.togive  = newborn.togive)
res
LHerds <- lapply(1:n.herds,function(i){module.initialize.oneHerd(i,param = param.allHerds[[i]])})
LHerds <- lapply(1:n.herds,function(i){module.aging.oneHerd(pop.table = LHerds[[i]],param = param.allHerds[[i]])})
where.fathers <- choose.Ram.reproduction(herds.Network,n.herds)
pop.table.ram <- lapply(1:n.herds,function(i){do.call("rbind",LHerds[where.fathers[[i]]])})
newBorns <- lapply(1:n.herds,function(i){module.reproduction(pop.table.ewe = LHerds[[i]],pop.table.ram = pop.table.ram[[i]],gen,param = param.allHerds[[i]])})
resultsReplace <- lapply(1:n.herds,function(i){module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newborn.table = newBorns[[i]],param = param.allHerds[[i]])})
resultsReplace
i = 1
module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newborn.table = newBorns[[i]],param = param.allHerds[[i]])
U <- module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newborn.table = newBorns[[i]],param = param.allHerds[[i]])
names(U)
################"" REPLACE the ewe that are too old.
w.F <- which(newborn.table$sex == 'F')
w.TooOld <- which(pop.table$herd != -1 & pop.table$sex == 'F' & pop.table$age >= param.default$career.ewe)
n.TooOld <- length(w.TooOld)
if (n.TooOld > 0){
pop.table$herd[w.TooOld]<- -1
u <- sample(w.F,n.TooOld,replace=FALSE)
pop.table <- rbind(pop.table,newborn.table[u,])
newborn.togive <- newborn.table[-u,]
} else {
newborn.togive <- newborn.table}
res <- list(pop.table = pop.table,newborn.togive  = newborn.togive)
source('~/WORK_LOCAL/RECHERCHE/TRAVAUX_DE_RECHERCHE/Pierre-MatthieuSalpeteur/pastodivModels/Codes/functions/modules_simulation.R')
U <- module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newborn.table = newBorns[[i]],param = param.allHerds[[i]])
U
source('~/WORK_LOCAL/RECHERCHE/TRAVAUX_DE_RECHERCHE/Pierre-MatthieuSalpeteur/pastodivModels/Codes/functions/modules_simulation.R')
U <- module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newborn.table = newBorns[[i]],param = param.allHerds[[i]])
source('~/WORK_LOCAL/RECHERCHE/TRAVAUX_DE_RECHERCHE/Pierre-MatthieuSalpeteur/pastodivModels/Codes/functions/modules_simulation.R')
source('~/WORK_LOCAL/RECHERCHE/TRAVAUX_DE_RECHERCHE/Pierre-MatthieuSalpeteur/pastodivModels/Codes/functions/modules_simulation.R')
source('~/WORK_LOCAL/RECHERCHE/TRAVAUX_DE_RECHERCHE/Pierre-MatthieuSalpeteur/pastodivModels/Codes/functions/modules_simulation.R')
U <- module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newborn.table = newBorns[[i]],param = param.allHerds[[i]])
source('~/WORK_LOCAL/RECHERCHE/TRAVAUX_DE_RECHERCHE/Pierre-MatthieuSalpeteur/pastodivModels/Codes/functions/modules_simulation.R')
resultsReplace <- lapply(1:n.herds,function(i){module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newborn.table = newBorns[[i]],param = param.allHerds[[i]])})
resultsReplace
LHerds <- lapply(1:n.herds,function(i){resultsReplace[[i]]$pop.table})
Lnewborns.togive <- lapply(1:n.herds,function(i){resultsReplace[[i]]$newborn.togive})
source('functions/modules_simulation.R')
# fonction generale
n.herds  <- 10
herds.Network <- matrix(sample(c(0,1),n.herds^2,replace=TRUE,prob = c(2/3,1/3)),n.herds,n.herds)
diag(herds.Network) <- 0
n.generations <- 1
myHerds <- Simulate.herds(n.herds,n.generations,param.allHerds=NULL,herds.Network)
if(is.null(param.allHerds)){
param.default <- list(n.ram = 2,
n.ewe = 40,
career.ram = 8,
age.min.ram=0,
career.ewe = 8,
age.min.ewe = 0,
age.repro.ewe = 3,
age.repro.ram = 1
)
param.default$rate.repro = as.data.frame(cbind(c(0,1,2),c(0,1,0)))
names(param.default$rate.repro) = c('nb.lambs','probability')
param.allHerds <- lapply(1:n.herds,function(i){param.default})
}
################### initialisation   = génération 0
if (is.null(LHerds))
LHerds <- lapply(1:n.herds,function(i){module.initialize.oneHerd(i,param = param.allHerds[[i]])})
LHerds
LHerds <- lapply(1:n.herds,function(i){module.aging.oneHerd(pop.table = LHerds[[i]],param = param.allHerds[[i]])})
where.fathers <- choose.Ram.reproduction(herds.Network,n.herds)
pop.table.ram <- lapply(1:n.herds,function(i){do.call("rbind",LHerds[where.fathers[[i]]])})
newBorns <- lapply(1:n.herds,function(i){module.reproduction(pop.table.ewe = LHerds[[i]],pop.table.ram = pop.table.ram[[i]],gen,param = param.allHerds[[i]])})
resultsReplace <- lapply(1:n.herds,function(i){module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newborn.table = newBorns[[i]],param = param.allHerds[[i]])})
LHerds <- lapply(1:n.herds,function(i){resultsReplace[[i]]$pop.table})
Lnewborns.togive <- lapply(1:n.herds,function(i){resultsReplace[[i]]$newborn.togive})
LHerds
pop.table.i <- LHerds[[i]]
param.i <- param.allHerds[[i]]
w.R.TooOld <- which((pop.table.i$herd != -1) & (pop.table.i$sex=='M') & pop.table.i$age > param.i$age.repro.ram)
w.R.TooOld
w.R.TooOld <- which((pop.table.i$herd != -1) & (pop.table.i$sex=='M') & pop.table.i$age > param.i$career.ram)
w.R.TooOld
n.R.TooOld <- length(w.R.TooOld)
if (n.R.TooOld > 0){
donnor.i <-sample(which(herds.Network[i,]==1),1)
L.i <- Lnewborns.togive[[donnor.i]]
L.i <- L.i[L.i$sex=='M',][sample(1:nrow(L.i),n.R.TooOld,replace=FALSE),]
L.i$herd <- i
pop.table.i$herd[w.R.TooOld]<- -1
pop.table.i <- rbind(pop.table.i,L.i)
LHerds[[i]] <- pop.table.i
}
source('functions/modules_simulation.R')
# fonction generale
n.herds  <- 10
herds.Network <- matrix(sample(c(0,1),n.herds^2,replace=TRUE,prob = c(2/3,1/3)),n.herds,n.herds)
diag(herds.Network) <- 0
n.generations <- 1
myHerds <- Simulate.herds(n.herds,n.generations,param.allHerds=NULL,herds.Network)
myHerds
source('functions/modules_simulation.R')
# fonction generale
n.herds  <- 10
herds.Network <- matrix(sample(c(0,1),n.herds^2,replace=TRUE,prob = c(2/3,1/3)),n.herds,n.herds)
diag(herds.Network) <- 0
n.generations <- 10
myHerds <- Simulate.herds(n.herds,n.generations,param.allHerds=NULL,herds.Network)
myHerds
if(is.null(param.allHerds)){
param.default <- list(n.ram = 2,
n.ewe = 40,
career.ram = 8,
career.ewe = 8,
age.min.ram = 0,
age.min.ewe = 0,
age.repro.ewe = 3,
age.repro.ram = 1
)
param.default$rate.repro = as.data.frame(cbind(c(0,1,2),c(0,1,0)))
names(param.default$rate.repro) = c('nb.lambs','probability')
param.allHerds <- lapply(1:n.herds,function(i){param.default})
}
################### initialisation   = génération 0
if (is.null(LHerds))
LHerds <- lapply(1:n.herds,function(i){module.initialize.oneHerd(i,param = param.allHerds[[i]])})
LHerds <- lapply(1:n.herds,function(i){module.aging.oneHerd(pop.table = LHerds[[i]],param = param.allHerds[[i]])})
where.fathers <- choose.Ram.reproduction(herds.Network,n.herds)
pop.table.ram <- lapply(1:n.herds,function(i){do.call("rbind",LHerds[where.fathers[[i]]])})
newBorns <- lapply(1:n.herds,function(i){module.reproduction(pop.table.ewe = LHerds[[i]],pop.table.ram = pop.table.ram[[i]],gen,param = param.allHerds[[i]])})
resultsReplace <- lapply(1:n.herds,function(i){module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newborn.table = newBorns[[i]],param = param.allHerds[[i]])})
LHerds <- lapply(1:n.herds,function(i){resultsReplace[[i]]$pop.table})
Lnewborns.togive <- lapply(1:n.herds,function(i){resultsReplace[[i]]$newborn.togive})
for (i in 1:n.herds){
pop.table.i <- LHerds[[i]]
param.i <- param.allHerds[[i]]
w.R.TooOld <- which((pop.table.i$herd != -1) & (pop.table.i$sex=='M') & pop.table.i$age > param.i$career.ram)
n.R.TooOld <- length(w.R.TooOld)
if (n.R.TooOld > 0){
donnor.i <-sample(which(herds.Network[i,]==1),1)
L.i <- Lnewborns.togive[[donnor.i]]
L.i <- L.i[L.i$sex=='M',][sample(1:nrow(L.i),n.R.TooOld,replace=FALSE),]
L.i$herd <- i
pop.table.i$herd[w.R.TooOld]<- -1
pop.table.i <- rbind(pop.table.i,L.i)
LHerds[[i]] <- pop.table.i
}
}
LHerds
gen
gen = 2
LHerds <- lapply(1:n.herds,function(i){module.aging.oneHerd(pop.table = LHerds[[i]],param = param.allHerds[[i]])})
LHerds
where.fathers <- choose.Ram.reproduction(herds.Network,n.herds)
where.fathers
pop.table.ram <- lapply(1:n.herds,function(i){do.call("rbind",LHerds[where.fathers[[i]]])})
newBorns <- lapply(1:n.herds,function(i){module.reproduction(pop.table.ewe = LHerds[[i]],pop.table.ram = pop.table.ram[[i]],gen,param = param.allHerds[[i]])})
i = 1
module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newborn.table = newBorns[[i]],param = param.allHerds[[i]])
i = 2
module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newborn.table = newBorns[[i]],param = param.allHerds[[i]])
i = 3
module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newborn.table = newBorns[[i]],param = param.allHerds[[i]])
i = 4
module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newborn.table = newBorns[[i]],param = param.allHerds[[i]])
i = 5
module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newborn.table = newBorns[[i]],param = param.allHerds[[i]])
i = 6
module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newborn.table = newBorns[[i]],param = param.allHerds[[i]])
i = 7
module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newborn.table = newBorns[[i]],param = param.allHerds[[i]])
source('functions/modules_simulation.R')
# fonction generale
n.herds  <- 10
herds.Network <- matrix(sample(c(0,1),n.herds^2,replace=TRUE,prob = c(2/3,1/3)),n.herds,n.herds)
diag(herds.Network) <- 0
n.generations <- 10
myHerds <- Simulate.herds(n.herds,n.generations,param.allHerds=NULL,herds.Network)
library(sbm)
help("estimateSimpleSBM")
nbNodes  <- 90
blockProp <- c(.5, .25, .25)      # group proportions
means <- diag(15., 3) + 5 # connectivity matrix: affiliation network
connectParam <- list(mean = means, var = 2)
mySampler <- sampleSimpleSBM(nbNodes, blockProp, connectParam, model = "gaussian")
## Estimation
mySimpleSBM <- estimateSimpleSBM(mySampler$netMatrix, 'gaussian', estimOptions = list(plot = FALSE))
plot(mySimpleSBM, 'data', ordered = FALSE)
plot(mySimpleSBM, 'data')
plot(mySimpleSBM, 'expected', ordered = FALSE)
plot(mySimpleSBM, 'expected')
nbNodes  <- 90
blockProp <- c(.5, .25, .25)      # group proportions
means <- diag(15., 3) + 5 # connectivity matrix: affiliation network
connectParam <- list(mean = means, var = 2)
mySampler <- sampleSimpleSBM(nbNodes, blockProp, connectParam, model = "gaussian")
## Estimation
mySimpleSBM <- estimateSimpleSBM(mySampler$netMatrix, 'gaussian', estimOptions = list(plot = FALSE))
plot(mySimpleSBM, 'data', ordered = FALSE)
plot(mySimpleSBM, 'data')
plot(mySimpleSBM, 'expected', ordered = FALSE)
plot(mySimpleSBM, 'expected')
library(fields)
library(maps)
library(spam)
library(sp)
library(maptools)
install.packages("maptools")
install.packages("spatstat")
install.packages("spatstat.data")
install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
library(INLA)
