# fonction generale
n.herds  <- 10
herds.Network <- matrix(sample(c(0,1),n.herds^2,replace=TRUE,prob = c(2/3,1/3)),n.herds,n.herds)
diag(herds.Network) <- 0
n.generations <- 1
myHerds <- Simulate.herds(n.herds,n.generations,param.allHerds=NULL,herds.Network)
if(is.null(param.allHerds)){
param.default <- list(n.ram = 2,
n.ewe = 40,
career.ram = 8,
age.min.ram=0,
career.ewe = 8,
age.min.ewe = 0,
age.repro.ewe = 3,
age.repro.ram = 1
)
param.default$rate.repro = as.data.frame(cbind(c(0,1,2),c(0,1,0)))
names(param.default$rate.repro) = c('nb.lambs','probability')
param.allHerds <- lapply(1:n.herds,function(i){param.default})
}
################### initialisation   = génération 0
if (is.null(LHerds))
LHerds <- lapply(1:n.herds,function(i){module.initialize.oneHerd(i,param = param.allHerds[[i]])})
LHerds
LHerds <- lapply(1:n.herds,function(i){module.aging.oneHerd(pop.table = LHerds[[i]],param = param.allHerds[[i]])})
where.fathers <- choose.Ram.reproduction(herds.Network,n.herds)
pop.table.ram <- lapply(1:n.herds,function(i){do.call("rbind",LHerds[where.fathers[[i]]])})
newBorns <- lapply(1:n.herds,function(i){module.reproduction(pop.table.ewe = LHerds[[i]],pop.table.ram = pop.table.ram[[i]],gen,param = param.allHerds[[i]])})
resultsReplace <- lapply(1:n.herds,function(i){module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newborn.table = newBorns[[i]],param = param.allHerds[[i]])})
LHerds <- lapply(1:n.herds,function(i){resultsReplace[[i]]$pop.table})
Lnewborns.togive <- lapply(1:n.herds,function(i){resultsReplace[[i]]$newborn.togive})
LHerds
pop.table.i <- LHerds[[i]]
param.i <- param.allHerds[[i]]
w.R.TooOld <- which((pop.table.i$herd != -1) & (pop.table.i$sex=='M') & pop.table.i$age > param.i$age.repro.ram)
w.R.TooOld
w.R.TooOld <- which((pop.table.i$herd != -1) & (pop.table.i$sex=='M') & pop.table.i$age > param.i$career.ram)
w.R.TooOld
n.R.TooOld <- length(w.R.TooOld)
if (n.R.TooOld > 0){
donnor.i <-sample(which(herds.Network[i,]==1),1)
L.i <- Lnewborns.togive[[donnor.i]]
L.i <- L.i[L.i$sex=='M',][sample(1:nrow(L.i),n.R.TooOld,replace=FALSE),]
L.i$herd <- i
pop.table.i$herd[w.R.TooOld]<- -1
pop.table.i <- rbind(pop.table.i,L.i)
LHerds[[i]] <- pop.table.i
}
source('functions/modules_simulation.R')
# fonction generale
n.herds  <- 10
herds.Network <- matrix(sample(c(0,1),n.herds^2,replace=TRUE,prob = c(2/3,1/3)),n.herds,n.herds)
diag(herds.Network) <- 0
n.generations <- 1
myHerds <- Simulate.herds(n.herds,n.generations,param.allHerds=NULL,herds.Network)
myHerds
source('functions/modules_simulation.R')
# fonction generale
n.herds  <- 10
herds.Network <- matrix(sample(c(0,1),n.herds^2,replace=TRUE,prob = c(2/3,1/3)),n.herds,n.herds)
diag(herds.Network) <- 0
n.generations <- 10
myHerds <- Simulate.herds(n.herds,n.generations,param.allHerds=NULL,herds.Network)
myHerds
if(is.null(param.allHerds)){
param.default <- list(n.ram = 2,
n.ewe = 40,
career.ram = 8,
career.ewe = 8,
age.min.ram = 0,
age.min.ewe = 0,
age.repro.ewe = 3,
age.repro.ram = 1
)
param.default$rate.repro = as.data.frame(cbind(c(0,1,2),c(0,1,0)))
names(param.default$rate.repro) = c('nb.lambs','probability')
param.allHerds <- lapply(1:n.herds,function(i){param.default})
}
################### initialisation   = génération 0
if (is.null(LHerds))
LHerds <- lapply(1:n.herds,function(i){module.initialize.oneHerd(i,param = param.allHerds[[i]])})
LHerds <- lapply(1:n.herds,function(i){module.aging.oneHerd(pop.table = LHerds[[i]],param = param.allHerds[[i]])})
where.fathers <- choose.Ram.reproduction(herds.Network,n.herds)
pop.table.ram <- lapply(1:n.herds,function(i){do.call("rbind",LHerds[where.fathers[[i]]])})
newBorns <- lapply(1:n.herds,function(i){module.reproduction(pop.table.ewe = LHerds[[i]],pop.table.ram = pop.table.ram[[i]],gen,param = param.allHerds[[i]])})
resultsReplace <- lapply(1:n.herds,function(i){module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newborn.table = newBorns[[i]],param = param.allHerds[[i]])})
LHerds <- lapply(1:n.herds,function(i){resultsReplace[[i]]$pop.table})
Lnewborns.togive <- lapply(1:n.herds,function(i){resultsReplace[[i]]$newborn.togive})
for (i in 1:n.herds){
pop.table.i <- LHerds[[i]]
param.i <- param.allHerds[[i]]
w.R.TooOld <- which((pop.table.i$herd != -1) & (pop.table.i$sex=='M') & pop.table.i$age > param.i$career.ram)
n.R.TooOld <- length(w.R.TooOld)
if (n.R.TooOld > 0){
donnor.i <-sample(which(herds.Network[i,]==1),1)
L.i <- Lnewborns.togive[[donnor.i]]
L.i <- L.i[L.i$sex=='M',][sample(1:nrow(L.i),n.R.TooOld,replace=FALSE),]
L.i$herd <- i
pop.table.i$herd[w.R.TooOld]<- -1
pop.table.i <- rbind(pop.table.i,L.i)
LHerds[[i]] <- pop.table.i
}
}
LHerds
gen
gen = 2
LHerds <- lapply(1:n.herds,function(i){module.aging.oneHerd(pop.table = LHerds[[i]],param = param.allHerds[[i]])})
LHerds
where.fathers <- choose.Ram.reproduction(herds.Network,n.herds)
where.fathers
pop.table.ram <- lapply(1:n.herds,function(i){do.call("rbind",LHerds[where.fathers[[i]]])})
newBorns <- lapply(1:n.herds,function(i){module.reproduction(pop.table.ewe = LHerds[[i]],pop.table.ram = pop.table.ram[[i]],gen,param = param.allHerds[[i]])})
i = 1
module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newborn.table = newBorns[[i]],param = param.allHerds[[i]])
i = 2
module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newborn.table = newBorns[[i]],param = param.allHerds[[i]])
i = 3
module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newborn.table = newBorns[[i]],param = param.allHerds[[i]])
i = 4
module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newborn.table = newBorns[[i]],param = param.allHerds[[i]])
i = 5
module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newborn.table = newBorns[[i]],param = param.allHerds[[i]])
i = 6
module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newborn.table = newBorns[[i]],param = param.allHerds[[i]])
i = 7
module.replaceEwe.intraHerd(pop.table = LHerds[[i]],newborn.table = newBorns[[i]],param = param.allHerds[[i]])
source('functions/modules_simulation.R')
# fonction generale
n.herds  <- 10
herds.Network <- matrix(sample(c(0,1),n.herds^2,replace=TRUE,prob = c(2/3,1/3)),n.herds,n.herds)
diag(herds.Network) <- 0
n.generations <- 10
myHerds <- Simulate.herds(n.herds,n.generations,param.allHerds=NULL,herds.Network)
library(sbm)
help("estimateSimpleSBM")
nbNodes  <- 90
blockProp <- c(.5, .25, .25)      # group proportions
means <- diag(15., 3) + 5 # connectivity matrix: affiliation network
connectParam <- list(mean = means, var = 2)
mySampler <- sampleSimpleSBM(nbNodes, blockProp, connectParam, model = "gaussian")
## Estimation
mySimpleSBM <- estimateSimpleSBM(mySampler$netMatrix, 'gaussian', estimOptions = list(plot = FALSE))
plot(mySimpleSBM, 'data', ordered = FALSE)
plot(mySimpleSBM, 'data')
plot(mySimpleSBM, 'expected', ordered = FALSE)
plot(mySimpleSBM, 'expected')
nbNodes  <- 90
blockProp <- c(.5, .25, .25)      # group proportions
means <- diag(15., 3) + 5 # connectivity matrix: affiliation network
connectParam <- list(mean = means, var = 2)
mySampler <- sampleSimpleSBM(nbNodes, blockProp, connectParam, model = "gaussian")
## Estimation
mySimpleSBM <- estimateSimpleSBM(mySampler$netMatrix, 'gaussian', estimOptions = list(plot = FALSE))
plot(mySimpleSBM, 'data', ordered = FALSE)
plot(mySimpleSBM, 'data')
plot(mySimpleSBM, 'expected', ordered = FALSE)
plot(mySimpleSBM, 'expected')
library(fields)
library(maps)
library(spam)
library(sp)
library(maptools)
install.packages("maptools")
install.packages("spatstat")
install.packages("spatstat.data")
install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
library(INLA)
source('functions/modules_simulation.R')
source('functions/complete_simulation.R')
library(igraph)
library(ggplot2)
install.packages(c("ade4", "ape", "aricode", "backports", "BH", "BiocManager", "bipartite", "bitops", "blockmodels", "broom", "callr", "circlize", "cli", "clipr", "clue", "coda", "colorspace", "corrplot", "covr", "cowplot", "crayon", "crosstalk", "curl", "DAAG", "data.table", "DBI", "dbplyr", "desc", "devtools", "digest", "dotCall64", "dplyr", "DT", "e1071", "econetwork", "ellipsis", "emmeans", "fansi", "farver", "fastmap", "fdrtool", "fields", "forcats", "foreach", "fs", "generics", "GetoptLong", "ggalluvial", "ggforce", "ggplot2", "ggplotify", "ggpubr", "ggraph", "ggsignif", "ggthemes", "gh", "git2r", "GlobalOptions", "glue", "graphlayouts", "gridGraphics", "gtools", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "huge", "hunspell", "igraph", "inline", "isoband", "iterators", "jsonlite", "kableExtra", "knitr", "ks", "labeling", "later", "latex2exp", "lifecycle", "loo", "lubridate", "magrittr", "matrixStats", "mclust", "memoise", "mime", "modelr", "mvtnorm", "network", "nloptr", "openssl", "packrat", "pals", "parsedate", "pillar", "pingr", "pixmap", "pkgbuild", "pkgdown", "pkgload", "PLNmodels", "plyr", "processx", "profvis", "promises", "ps", "purrr", "R6", "rappdirs", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "rematch2", "remotes", "reprex", "reshape2", "reticulate", "rex", "rgl", "rlang", "rmarkdown", "rmutil", "rprojroot", "rstan", "rstudioapi", "rvcheck", "rversions", "rvest", "segmented", "shape", "shiny", "shinydashboardPlus", "shinythemes", "shinyWidgets", "showtext", "showtextdb", "sna", "sp", "spam", "spelling", "StanHeaders", "statnet.common", "stringdist", "stringi", "survival", "sys", "sysfonts", "testthat", "tibble", "tidygraph", "tidyr", "tidyselect", "tidyverse", "tinytex", "tweenr", "usethis", "utf8", "vctrs", "vegan", "viridis", "viridisLite", "withr", "xfun", "xml2"))
install.packages(c("ade4", "ape", "aricode", "backports", "BH", "BiocManager", "bipartite", "bitops", "blockmodels", "broom", "callr", "circlize", "cli", "clipr", "clue", "coda", "colorspace", "corrplot", "covr", "cowplot", "crayon", "crosstalk", "curl", "DAAG", "data.table", "DBI", "dbplyr", "desc", "devtools", "digest", "dotCall64", "dplyr", "DT", "e1071", "econetwork", "ellipsis", "emmeans", "fansi", "farver", "fastmap", "fdrtool", "fields", "forcats", "foreach", "fs", "generics", "GetoptLong", "ggalluvial", "ggforce", "ggplot2", "ggplotify", "ggpubr", "ggraph", "ggsignif", "ggthemes", "gh", "git2r", "GlobalOptions", "glue", "graphlayouts", "gridGraphics", "gtools", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "huge", "hunspell", "igraph", "inline", "isoband", "iterators", "jsonlite", "kableExtra", "knitr", "ks", "labeling", "later", "latex2exp", "lifecycle", "loo", "lubridate", "magrittr", "matrixStats", "mclust", "memoise", "mime", "modelr", "mvtnorm", "network", "nloptr", "openssl", "packrat", "pals", "parsedate", "pillar", "pingr", "pixmap", "pkgbuild", "pkgdown", "pkgload", "PLNmodels", "plyr", "processx", "profvis", "promises", "ps", "purrr", "R6", "rappdirs", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "rematch2", "remotes", "reprex", "reshape2", "reticulate", "rex", "rgl", "rlang", "rmarkdown", "rmutil", "rprojroot", "rstan", "rstudioapi", "rvcheck", "rversions", "rvest", "segmented", "shape", "shiny", "shinydashboardPlus", "shinythemes", "shinyWidgets", "showtext", "showtextdb", "sna", "sp", "spam", "spelling", "StanHeaders", "statnet.common", "stringdist", "stringi", "survival", "sys", "sysfonts", "testthat", "tibble", "tidygraph", "tidyr", "tidyselect", "tidyverse", "tinytex", "tweenr", "usethis", "utf8", "vctrs", "vegan", "viridis", "viridisLite", "withr", "xfun", "xml2"))
install.packages(c("ade4", "ape", "aricode", "backports", "BH", "BiocManager", "bipartite", "bitops", "blockmodels", "broom", "callr", "circlize", "cli", "clipr", "clue", "coda", "colorspace", "corrplot", "covr", "cowplot", "crayon", "crosstalk", "curl", "DAAG", "data.table", "DBI", "dbplyr", "desc", "devtools", "digest", "dotCall64", "dplyr", "DT", "e1071", "econetwork", "ellipsis", "emmeans", "fansi", "farver", "fastmap", "fdrtool", "fields", "forcats", "foreach", "fs", "generics", "GetoptLong", "ggalluvial", "ggforce", "ggplot2", "ggplotify", "ggpubr", "ggraph", "ggsignif", "ggthemes", "gh", "git2r", "GlobalOptions", "glue", "graphlayouts", "gridGraphics", "gtools", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "huge", "hunspell", "igraph", "inline", "isoband", "iterators", "jsonlite", "kableExtra", "knitr", "ks", "labeling", "later", "latex2exp", "lifecycle", "loo", "lubridate", "magrittr", "matrixStats", "mclust", "memoise", "mime", "modelr", "mvtnorm", "network", "nloptr", "openssl", "packrat", "pals", "parsedate", "pillar", "pingr", "pixmap", "pkgbuild", "pkgdown", "pkgload", "PLNmodels", "plyr", "processx", "profvis", "promises", "ps", "purrr", "R6", "rappdirs", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "rematch2", "remotes", "reprex", "reshape2", "reticulate", "rex", "rgl", "rlang", "rmarkdown", "rmutil", "rprojroot", "rstan", "rstudioapi", "rvcheck", "rversions", "rvest", "segmented", "shape", "shiny", "shinydashboardPlus", "shinythemes", "shinyWidgets", "showtext", "showtextdb", "sna", "sp", "spam", "spelling", "StanHeaders", "statnet.common", "stringdist", "stringi", "survival", "sys", "sysfonts", "testthat", "tibble", "tidygraph", "tidyr", "tidyselect", "tidyverse", "tinytex", "tweenr", "usethis", "utf8", "vctrs", "vegan", "viridis", "viridisLite", "withr", "xfun", "xml2"))
install.packages(c("ade4", "ape", "aricode", "backports", "BH", "BiocManager", "bipartite", "bitops", "blockmodels", "broom", "callr", "circlize", "cli", "clipr", "clue", "coda", "colorspace", "corrplot", "covr", "cowplot", "crayon", "crosstalk", "curl", "DAAG", "data.table", "DBI", "dbplyr", "desc", "devtools", "digest", "dotCall64", "dplyr", "DT", "e1071", "econetwork", "ellipsis", "emmeans", "fansi", "farver", "fastmap", "fdrtool", "fields", "forcats", "foreach", "fs", "generics", "GetoptLong", "ggalluvial", "ggforce", "ggplot2", "ggplotify", "ggpubr", "ggraph", "ggsignif", "ggthemes", "gh", "git2r", "GlobalOptions", "glue", "graphlayouts", "gridGraphics", "gtools", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "huge", "hunspell", "igraph", "inline", "isoband", "iterators", "jsonlite", "kableExtra", "knitr", "ks", "labeling", "later", "latex2exp", "lifecycle", "loo", "lubridate", "magrittr", "matrixStats", "mclust", "memoise", "mime", "modelr", "mvtnorm", "network", "nloptr", "openssl", "packrat", "pals", "parsedate", "pillar", "pingr", "pixmap", "pkgbuild", "pkgdown", "pkgload", "PLNmodels", "plyr", "processx", "profvis", "promises", "ps", "purrr", "R6", "rappdirs", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "rematch2", "remotes", "reprex", "reshape2", "reticulate", "rex", "rgl", "rlang", "rmarkdown", "rmutil", "rprojroot", "rstan", "rstudioapi", "rvcheck", "rversions", "rvest", "segmented", "shape", "shiny", "shinydashboardPlus", "shinythemes", "shinyWidgets", "showtext", "showtextdb", "sna", "sp", "spam", "spelling", "StanHeaders", "statnet.common", "stringdist", "stringi", "survival", "sys", "sysfonts", "testthat", "tibble", "tidygraph", "tidyr", "tidyselect", "tidyverse", "tinytex", "tweenr", "usethis", "utf8", "vctrs", "vegan", "viridis", "viridisLite", "withr", "xfun", "xml2"))
install.packages(c("ade4", "ape", "aricode", "backports", "BH", "BiocManager", "bipartite", "bitops", "blockmodels", "broom", "callr", "circlize", "cli", "clipr", "clue", "coda", "colorspace", "corrplot", "covr", "cowplot", "crayon", "crosstalk", "curl", "DAAG", "data.table", "DBI", "dbplyr", "desc", "devtools", "digest", "dotCall64", "dplyr", "DT", "e1071", "econetwork", "ellipsis", "emmeans", "fansi", "farver", "fastmap", "fdrtool", "fields", "forcats", "foreach", "fs", "generics", "GetoptLong", "ggalluvial", "ggforce", "ggplot2", "ggplotify", "ggpubr", "ggraph", "ggsignif", "ggthemes", "gh", "git2r", "GlobalOptions", "glue", "graphlayouts", "gridGraphics", "gtools", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "huge", "hunspell", "igraph", "inline", "isoband", "iterators", "jsonlite", "kableExtra", "knitr", "ks", "labeling", "later", "latex2exp", "lifecycle", "loo", "lubridate", "magrittr", "matrixStats", "mclust", "memoise", "mime", "modelr", "mvtnorm", "network", "nloptr", "openssl", "packrat", "pals", "parsedate", "pillar", "pingr", "pixmap", "pkgbuild", "pkgdown", "pkgload", "PLNmodels", "plyr", "processx", "profvis", "promises", "ps", "purrr", "R6", "rappdirs", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "rematch2", "remotes", "reprex", "reshape2", "reticulate", "rex", "rgl", "rlang", "rmarkdown", "rmutil", "rprojroot", "rstan", "rstudioapi", "rvcheck", "rversions", "rvest", "segmented", "shape", "shiny", "shinydashboardPlus", "shinythemes", "shinyWidgets", "showtext", "showtextdb", "sna", "sp", "spam", "spelling", "StanHeaders", "statnet.common", "stringdist", "stringi", "survival", "sys", "sysfonts", "testthat", "tibble", "tidygraph", "tidyr", "tidyselect", "tidyverse", "tinytex", "tweenr", "usethis", "utf8", "vctrs", "vegan", "viridis", "viridisLite", "withr", "xfun", "xml2"))
install.packages(c("ade4", "ape", "aricode", "backports", "BH", "BiocManager", "bipartite", "bitops", "blockmodels", "broom", "callr", "circlize", "cli", "clipr", "clue", "coda", "colorspace", "corrplot", "covr", "cowplot", "crayon", "crosstalk", "curl", "DAAG", "data.table", "DBI", "dbplyr", "desc", "devtools", "digest", "dotCall64", "dplyr", "DT", "e1071", "econetwork", "ellipsis", "emmeans", "fansi", "farver", "fastmap", "fdrtool", "fields", "forcats", "foreach", "fs", "generics", "GetoptLong", "ggalluvial", "ggforce", "ggplot2", "ggplotify", "ggpubr", "ggraph", "ggsignif", "ggthemes", "gh", "git2r", "GlobalOptions", "glue", "graphlayouts", "gridGraphics", "gtools", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "huge", "hunspell", "igraph", "inline", "isoband", "iterators", "jsonlite", "kableExtra", "knitr", "ks", "labeling", "later", "latex2exp", "lifecycle", "loo", "lubridate", "magrittr", "matrixStats", "mclust", "memoise", "mime", "modelr", "mvtnorm", "network", "nloptr", "openssl", "packrat", "pals", "parsedate", "pillar", "pingr", "pixmap", "pkgbuild", "pkgdown", "pkgload", "PLNmodels", "plyr", "processx", "profvis", "promises", "ps", "purrr", "R6", "rappdirs", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "rematch2", "remotes", "reprex", "reshape2", "reticulate", "rex", "rgl", "rlang", "rmarkdown", "rmutil", "rprojroot", "rstan", "rstudioapi", "rvcheck", "rversions", "rvest", "segmented", "shape", "shiny", "shinydashboardPlus", "shinythemes", "shinyWidgets", "showtext", "showtextdb", "sna", "sp", "spam", "spelling", "StanHeaders", "statnet.common", "stringdist", "stringi", "survival", "sys", "sysfonts", "testthat", "tibble", "tidygraph", "tidyr", "tidyselect", "tidyverse", "tinytex", "tweenr", "usethis", "utf8", "vctrs", "vegan", "viridis", "viridisLite", "withr", "xfun", "xml2"))
library(igraph)
install.packages("igraph")
install.packages("igraph")
install.packages("igraph")
install.packages("igraph")
install.packages("igraph")
install.packages("igraph")
library(igraph)
set.seed(10)
E <-  erdos.renyi.game(10,0.1,loops = TRUE)
get.ad
get.adjacency(E)
knitr::opts_chunk$set(echo = FALSE)
M <- get.adjacency(E)
rowSums(M)
M <- as.matrix(get.adjacency(E))
rowSums(M)
E <-  erdos.renyi.game(10,0.1,loops = TRUE)
M <- as.matrix(get.adjacency(E))
ind <- which(rowSums(M)==0)
M[ind,ind] <- 1
M
plot(graph_from_adjacency_matrix(M))
ind <- which(rowSums(M)==0)
diag(M)[ind] <- 1
plot(graph_from_adjacency_matrix(M))
E <-  erdos.renyi.game(10,0.1,loops = TRUE)
M <- as.matrix(get.adjacency(E))
ind <- which(rowSums(M)==0)
diag(M)[ind] <- 1
plot(graph_from_adjacency_matrix(M))
set.seed(10)
E <-  erdos.renyi.game(10,0.1,loops = TRUE)
M <- as.matrix(get.adjacency(E))
ind <- which(rowSums(M)==0)
diag(M)[ind] <- 1
plot(graph_from_adjacency_matrix(M))
set.seed(10)
E <-  erdos.renyi.game(10,0.1,loops = TRUE,directed=TRUE)
M <- as.matrix(get.adjacency(E))
ind <- which(rowSums(M)==0)
diag(M)[ind] <- 1
plot(graph_from_adjacency_matrix(M))
set.seed(8)
E <-  erdos.renyi.game(10,0.1,loops = TRUE,directed=TRUE)
diag(M)[ind] <- 1
plot(graph_from_adjacency_matrix(M))
set.seed(8)
E <-  erdos.renyi.game(10,0.05,loops = TRUE,directed=TRUE)
diag(M)[ind] <- 1
plot(graph_from_adjacency_matrix(M))
library(igraph)
set.seed(8)
E <-  erdos.renyi.game(10,0.05,loops = TRUE,directed=TRUE)
M <- as.matrix(get.adjacency(E))
ind <- which(rowSums(M)==0)
diag(M)[ind] <- 1
plot(graph_from_adjacency_matrix(M))
library(igraph)
set.seed(8)
E <-  erdos.renyi.game(10,0.05,loops = TRUE,directed=TRUE)
M <- as.matrix(get.adjacency(E))
ind <- which(rowSums(M)==0)
diag(M)[ind] <- 1
plot(graph_from_adjacency_matrix(M))
library(igraph)
set.seed(8)
E <-  erdos.renyi.game(10,0.05,loops = TRUE,directed=TRUE)
M <- as.matrix(get.adjacency(E))
ind <- which(rowSums(M)==0)
diag(M)[ind] <- 1
plot(graph_from_adjacency_matrix(M))
M
library(igraph)
set.seed(8)
E <-  erdos.renyi.game(10,0.05,loops = TRUE,directed=TRUE)
M <- as.matrix(get.adjacency(E))
ind <- which(rowSums(M)==0)
diag(M)[ind] <- 1
plot(graph_from_adjacency_matrix(t(M)))
library(igraph)
set.seed(8)
E <-  erdos.renyi.game(10,0.05,loops = TRUE,directed=TRUE)
M <- as.matrix(get.adjacency(E))
ind <- c(which(rowSums(M)==0),5)
diag(M)[ind] <- 1
plot(graph_from_adjacency_matrix(t(M)))
source('functions/modules_simulation.R')
source('functions/complete_simulation.R')
library(igraph)
library(ggplot2)
library(dplyr)
######  General parameters
n.herds  <- 10 #Nb de troupeaux
n.generations <- 50 # Nb de générations
# Parameters
param.default <- list(n.ram = 2,
n.ewe = 40,
career.ram = 8,
career.ewe = 8,
age.min.ram = 0,
age.min.ewe = 0,
age.repro.ewe = 3,
age.repro.ram = 1)
param.default$rate.repro = as.data.frame(cbind(c(0,1,2),c(0,1,0)))
names(param.default$rate.repro) = c('nb.lambs','probability')
param= lapply(1:n.herds,function(i) param.default) # here same parameters for all the Herds.
# Network
ram.Network <- diag(1,n.herds)
plot(graph_from_adjacency_matrix(ram.Network, mode = c("directed")))
herds.Network = list(ewe= NULL,ram = ram.Network,ram.for.repro = ram.Network)
# Simulation
res <- Simulate.herds(n.herds,n.generations,param.allHerds=param,herds.Network = herds.Network,LHerds=NULL,computeInbreeding  = TRUE)
# Simulation
res <- Simulate.herds(n.herds,n.generations,param.allHerds=param,herds.Network = herds.Network,LHerds=NULL,computeInbreeding  = FALSE)
LHerds <- res$LHerds
# InBreeding
inBreeding <- computeInbreedingFunction(LHerds)
inBreeding$herd <- as.factor(inBreeding$herd)
# InBreeding
inBreeding <- computeInbreedingFunction(LHerds)
LHerds
LHerds[[1]]
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
LEV <- unique(c(( allHerds$ind),( allHerds$father),( allHerds$mother)))
ped$ind <- as.numeric(factor(ped$ind,levels=LEV))
ped$father <- as.numeric(factor(ped$father,levels=LEV))
ped$mother <- as.numeric(factor(ped$mother,levels=LEV))
w.without.knwon.parents  <-  which(ped$father==which(LEV == "0"))
ped$father[w.without.knwon.parents] <- 0
ped$mother[w.without.knwon.parents] <- 0
w.M <- which(ped$sex=='M')
w.F <- which(ped$sex=='F')
ped$sex[w.M] <- 1
ped$sex[w.F] <- 2
w.F
w.M
ped$sex
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
ped$sex
ped$sex12 <- 1
ped$sex12[w.F] <- 2
ped$sex <- ped$sex12
geneal <- gen.genealogy(ped)
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
LEV <- unique(c(( allHerds$ind),( allHerds$father),( allHerds$mother)))
ped$ind <- as.numeric(factor(ped$ind,levels=LEV))
ped$father <- as.numeric(factor(ped$father,levels=LEV))
ped$mother <- as.numeric(factor(ped$mother,levels=LEV))
w.without.knwon.parents  <-  which(ped$father==which(LEV == "0"))
ped$father[w.without.knwon.parents] <- 0
ped$mother[w.without.knwon.parents] <- 0
w.M <- which(ped$sex=='M')
w.F <- which(ped$sex=='F')
ped$sex12 <- 1
ped$sex12[w.F] <- 2
ped$sex <- ped$sex12
geneal <- gen.genealogy(ped)
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
LEV <- unique(c(( allHerds$ind),( allHerds$father),( allHerds$mother)))
ped$ind <- as.numeric(factor(ped$ind,levels=LEV))
ped$father <- as.numeric(factor(ped$father,levels=LEV))
ped$mother <- as.numeric(factor(ped$mother,levels=LEV))
w.without.knwon.parents  <-  which(ped$father==which(LEV == "0"))
ped$father[w.without.knwon.parents] <- 0
ped$mother[w.without.knwon.parents] <- 0
w.M <- which(ped$sex=='M')
w.F <- which(ped$sex=='F')
ped$sex12 <- 1
ped$sex12[w.F] <- 2
ped$sex <- ped$sex12
geneal <- gen.genealogy(ped)
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
LEV <- unique(c(( allHerds$ind),( allHerds$father),( allHerds$mother)))
ped$ind <- as.numeric(factor(ped$ind,levels=LEV))
ped$father <- as.numeric(factor(ped$father,levels=LEV))
ped$mother <- as.numeric(factor(ped$mother,levels=LEV))
w.without.knwon.parents  <-  which(ped$father==which(LEV == "0"))
ped$father[w.without.knwon.parents] <- 0
ped$mother[w.without.knwon.parents] <- 0
ped$sex <-  mapvalues(ped$sex, from = c("M", "F"), to = c(1, 2))
library(plry)
library(plyr)
ped$sex <-  mapvalues(ped$sex, from = c("M", "F"), to = c(1, 2))
ped$sex
ped$sex <- as.numeric(mapvalues(ped$sex, from = c("M", "F"), to = c(1, 2)))
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
LEV <- unique(c(( allHerds$ind),( allHerds$father),( allHerds$mother)))
ped$ind <- as.numeric(factor(ped$ind,levels=LEV))
ped$father <- as.numeric(factor(ped$father,levels=LEV))
ped$mother <- as.numeric(factor(ped$mother,levels=LEV))
w.without.knwon.parents  <-  which(ped$father==which(LEV == "0"))
ped$father[w.without.knwon.parents] <- 0
ped$mother[w.without.knwon.parents] <- 0
ped$sex <- as.numeric(mapvalues(ped$sex, from = c("M", "F"), to = c(1, 2)))
geneal <- gen.genealogy(ped)
pdd$
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
LEV <- unique(c(( allHerds$ind),( allHerds$father),( allHerds$mother)))
ped$ind <- as.numeric(factor(ped$ind,levels=LEV))
ped$father <- as.numeric(factor(ped$father,levels=LEV))
ped$mother <- as.numeric(factor(ped$mother,levels=LEV))
w.without.knwon.parents  <-  which(ped$father==which(LEV == "0"))
ped$father[w.without.knwon.parents] <- 0
ped$mother[w.without.knwon.parents] <- 0
ped$father
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
ped
LEV <- unique(c(( allHerds$ind),( allHerds$father),( allHerds$mother)))
ped$ind <- as.numeric(factor(ped$ind,levels=LEV))
ped$father <- as.numeric(factor(ped$father,levels=LEV))
ped$mother <- as.numeric(factor(ped$mother,levels=LEV))
ped$mother
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
LEV <- unique(c(( allHerds$ind),( allHerds$father),( allHerds$mother)))
LEV
ped$ind <- as.numeric(factor(ped$ind,levels=LEV))
ped$ind
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
LEV <- unique(c(( allHerds$ind),( allHerds$father),( allHerds$mother)))
factor(ped$ind,levels=LEV)
ped$ind
LEV
allHerds$ind
allHerds$father
allHerds$mother
LEV <- unique(c(( allHerds$ind),( allHerds$father),( allHerds$mother)))
LEV
( allHerds$ind)
( allHerds$father)
( allHerds$mother)
c(( allHerds$ind),( allHerds$father),( allHerds$mother))
LEV <- unique(c(( as.character(allHerds$ind)),as.charachter( allHerds$father),as.character( allHerds$mother)))
LEV <- unique(c(( as.character(allHerds$ind)),as.character( allHerds$father),as.character( allHerds$mother)))
LEV
ped$ind <- as.numeric(factor(ped$ind,levels=LEV))
ped$father <- as.numeric(factor(ped$father,levels=LEV))
ped$mother <- as.numeric(factor(ped$mother,levels=LEV))
ped$mother
ped$father
ped$ind
w.without.knwon.parents  <-  which(ped$father==which(LEV == "0"))
ped$father[w.without.knwon.parents] <- 0
ped$mother[w.without.knwon.parents] <- 0
ped$sex <- as.numeric(mapvalues(ped$sex, from = c("M", "F"), to = c(1, 2)))
geneal <- gen.genealogy(ped)
u <- which(ped$herd!=-1)
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
LEV <- unique(c(( as.character(allHerds$ind)),as.character( allHerds$father),as.character( allHerds$mother)))
ped$ind <- as.numeric(factor(ped$ind,levels=LEV))
ped$father <- as.numeric(factor(ped$father,levels=LEV))
ped$mother <- as.numeric(factor(ped$mother,levels=LEV))
w.without.knwon.parents  <-  which(ped$father==which(LEV == "0"))
ped$father[w.without.knwon.parents] <- 0
ped$mother[w.without.knwon.parents] <- 0
ped$sex <- as.numeric(mapvalues(ped$sex, from = c("M", "F"), to = c(1, 2)))
geneal <- gen.genealogy(ped)
ped
res <- Simulate.herds(n.herds,n.generations,param.allHerds=param,herds.Network = herds.Network,LHerds=NULL,computeInbreeding  = FALSE)
LHerds <- res$LHerds
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- ped[!duplicated(ped$ind),]
ped
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
ped
LEV <- unique(c(( as.character(allHerds$ind)),as.character( allHerds$father),as.character( allHerds$mother)))
ped$ind_num <- as.numeric(factor(ped$ind,levels=LEV))
cbind(ped$ind,ped$ind_num)
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
LEV <- unique(c(( as.character(allHerds$ind)),as.character( allHerds$father),as.character( allHerds$mother)))
ped$ind_num <- as.numeric(factor(ped$ind,levels=LEV))
cbind(ped$ind,ped$ind_num)
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
LEV <- c(levels(allHerds$ind), levels (allHerds$father), levels(allHerds$mother))
LEV
LEV <- unique(c(levels(allHerds$ind), levels (allHerds$father), levels(allHerds$mother)))
LEV
indNew <- mapvalues(ped$ind, from = LEV, to = 1:ength(LEV))
indNew <- mapvalues(ped$ind, from = LEV, to = 1:length(LEV))
indNew
