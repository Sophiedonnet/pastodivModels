diag(M)[ind] <- 1
plot(graph_from_adjacency_matrix(M))
set.seed(10)
E <-  erdos.renyi.game(10,0.1,loops = TRUE)
M <- as.matrix(get.adjacency(E))
ind <- which(rowSums(M)==0)
diag(M)[ind] <- 1
plot(graph_from_adjacency_matrix(M))
set.seed(10)
E <-  erdos.renyi.game(10,0.1,loops = TRUE,directed=TRUE)
M <- as.matrix(get.adjacency(E))
ind <- which(rowSums(M)==0)
diag(M)[ind] <- 1
plot(graph_from_adjacency_matrix(M))
set.seed(8)
E <-  erdos.renyi.game(10,0.1,loops = TRUE,directed=TRUE)
diag(M)[ind] <- 1
plot(graph_from_adjacency_matrix(M))
set.seed(8)
E <-  erdos.renyi.game(10,0.05,loops = TRUE,directed=TRUE)
diag(M)[ind] <- 1
plot(graph_from_adjacency_matrix(M))
library(igraph)
set.seed(8)
E <-  erdos.renyi.game(10,0.05,loops = TRUE,directed=TRUE)
M <- as.matrix(get.adjacency(E))
ind <- which(rowSums(M)==0)
diag(M)[ind] <- 1
plot(graph_from_adjacency_matrix(M))
library(igraph)
set.seed(8)
E <-  erdos.renyi.game(10,0.05,loops = TRUE,directed=TRUE)
M <- as.matrix(get.adjacency(E))
ind <- which(rowSums(M)==0)
diag(M)[ind] <- 1
plot(graph_from_adjacency_matrix(M))
library(igraph)
set.seed(8)
E <-  erdos.renyi.game(10,0.05,loops = TRUE,directed=TRUE)
M <- as.matrix(get.adjacency(E))
ind <- which(rowSums(M)==0)
diag(M)[ind] <- 1
plot(graph_from_adjacency_matrix(M))
M
library(igraph)
set.seed(8)
E <-  erdos.renyi.game(10,0.05,loops = TRUE,directed=TRUE)
M <- as.matrix(get.adjacency(E))
ind <- which(rowSums(M)==0)
diag(M)[ind] <- 1
plot(graph_from_adjacency_matrix(t(M)))
library(igraph)
set.seed(8)
E <-  erdos.renyi.game(10,0.05,loops = TRUE,directed=TRUE)
M <- as.matrix(get.adjacency(E))
ind <- c(which(rowSums(M)==0),5)
diag(M)[ind] <- 1
plot(graph_from_adjacency_matrix(t(M)))
source('functions/modules_simulation.R')
source('functions/complete_simulation.R')
library(igraph)
library(ggplot2)
library(dplyr)
######  General parameters
n.herds  <- 10 #Nb de troupeaux
>>>>>>> Stashed changes
n.generations <- 50 # Nb de gÃ©nÃ©rations
# Parameters
param.default <- list(n.ram = 5,
n.ewe = 80,
career.ram = 8,
career.ewe = 8,
age.min.ram = 0,
age.min.ewe = 0,
age.repro.ewe = 3,
age.repro.ram = 1)
param.default$rate.repro = as.data.frame(cbind(c(0,1,2),c(0,1,0)))
names(param.default$rate.repro) = c('nb.lambs','probability')
# Network
n.herds  <- 1 #Nb de troupeaux
param= lapply(1:n.herds,function(i) param.default) # here same parameters for all the Herds.
# Simulation
<<<<<<< Updated upstream
res <- Simulate.herds(n.herds,n.generations = 50,param.allHerds=param,herds.Network = herds.Network,LHerds=NULL,computeInbreeding  = TRUE)
source('~/WORK_LOCAL/RECHERCHE/TRAVAUX_DE_RECHERCHE/Pierre-MatthieuSalpeteur/pastodivModels/Codes/functions/modules_simulation.R')
source('~/WORK_LOCAL/RECHERCHE/TRAVAUX_DE_RECHERCHE/Pierre-MatthieuSalpeteur/pastodivModels/Codes/functions/modules_simulation.R')
# Simulation
res <- Simulate.herds(n.herds,n.generations = 50,param.allHerds=param,herds.Network = herds.Network,LHerds=NULL,computeInbreeding  = TRUE)
size.i
param.i
# Parameters
param.default <- list(n.ram = 5,
=======
res <- Simulate.herds(n.herds,n.generations,param.allHerds=param,herds.Network = herds.Network,LHerds=NULL,computeInbreeding  = TRUE)
# Simulation
res <- Simulate.herds(n.herds,n.generations,param.allHerds=param,herds.Network = herds.Network,LHerds=NULL,computeInbreeding  = FALSE)
LHerds <- res$LHerds
# InBreeding
inBreeding <- computeInbreedingFunction(LHerds)
inBreeding$herd <- as.factor(inBreeding$herd)
# InBreeding
inBreeding <- computeInbreedingFunction(LHerds)
LHerds
LHerds[[1]]
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
LEV <- unique(c(( allHerds$ind),( allHerds$father),( allHerds$mother)))
ped$ind <- as.numeric(factor(ped$ind,levels=LEV))
ped$father <- as.numeric(factor(ped$father,levels=LEV))
ped$mother <- as.numeric(factor(ped$mother,levels=LEV))
w.without.knwon.parents  <-  which(ped$father==which(LEV == "0"))
ped$father[w.without.knwon.parents] <- 0
ped$mother[w.without.knwon.parents] <- 0
w.M <- which(ped$sex=='M')
w.F <- which(ped$sex=='F')
ped$sex[w.M] <- 1
ped$sex[w.F] <- 2
w.F
w.M
ped$sex
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
ped$sex
ped$sex12 <- 1
ped$sex12[w.F] <- 2
ped$sex <- ped$sex12
geneal <- gen.genealogy(ped)
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
LEV <- unique(c(( allHerds$ind),( allHerds$father),( allHerds$mother)))
ped$ind <- as.numeric(factor(ped$ind,levels=LEV))
ped$father <- as.numeric(factor(ped$father,levels=LEV))
ped$mother <- as.numeric(factor(ped$mother,levels=LEV))
w.without.knwon.parents  <-  which(ped$father==which(LEV == "0"))
ped$father[w.without.knwon.parents] <- 0
ped$mother[w.without.knwon.parents] <- 0
w.M <- which(ped$sex=='M')
w.F <- which(ped$sex=='F')
ped$sex12 <- 1
ped$sex12[w.F] <- 2
ped$sex <- ped$sex12
geneal <- gen.genealogy(ped)
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
LEV <- unique(c(( allHerds$ind),( allHerds$father),( allHerds$mother)))
ped$ind <- as.numeric(factor(ped$ind,levels=LEV))
ped$father <- as.numeric(factor(ped$father,levels=LEV))
ped$mother <- as.numeric(factor(ped$mother,levels=LEV))
w.without.knwon.parents  <-  which(ped$father==which(LEV == "0"))
ped$father[w.without.knwon.parents] <- 0
ped$mother[w.without.knwon.parents] <- 0
w.M <- which(ped$sex=='M')
w.F <- which(ped$sex=='F')
ped$sex12 <- 1
ped$sex12[w.F] <- 2
ped$sex <- ped$sex12
geneal <- gen.genealogy(ped)
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
LEV <- unique(c(( allHerds$ind),( allHerds$father),( allHerds$mother)))
ped$ind <- as.numeric(factor(ped$ind,levels=LEV))
ped$father <- as.numeric(factor(ped$father,levels=LEV))
ped$mother <- as.numeric(factor(ped$mother,levels=LEV))
w.without.knwon.parents  <-  which(ped$father==which(LEV == "0"))
ped$father[w.without.knwon.parents] <- 0
ped$mother[w.without.knwon.parents] <- 0
ped$sex <-  mapvalues(ped$sex, from = c("M", "F"), to = c(1, 2))
library(plry)
library(plyr)
ped$sex <-  mapvalues(ped$sex, from = c("M", "F"), to = c(1, 2))
ped$sex
ped$sex <- as.numeric(mapvalues(ped$sex, from = c("M", "F"), to = c(1, 2)))
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
LEV <- unique(c(( allHerds$ind),( allHerds$father),( allHerds$mother)))
ped$ind <- as.numeric(factor(ped$ind,levels=LEV))
ped$father <- as.numeric(factor(ped$father,levels=LEV))
ped$mother <- as.numeric(factor(ped$mother,levels=LEV))
w.without.knwon.parents  <-  which(ped$father==which(LEV == "0"))
ped$father[w.without.knwon.parents] <- 0
ped$mother[w.without.knwon.parents] <- 0
ped$sex <- as.numeric(mapvalues(ped$sex, from = c("M", "F"), to = c(1, 2)))
geneal <- gen.genealogy(ped)
pdd$
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
LEV <- unique(c(( allHerds$ind),( allHerds$father),( allHerds$mother)))
ped$ind <- as.numeric(factor(ped$ind,levels=LEV))
ped$father <- as.numeric(factor(ped$father,levels=LEV))
ped$mother <- as.numeric(factor(ped$mother,levels=LEV))
w.without.knwon.parents  <-  which(ped$father==which(LEV == "0"))
ped$father[w.without.knwon.parents] <- 0
ped$mother[w.without.knwon.parents] <- 0
ped$father
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
ped
LEV <- unique(c(( allHerds$ind),( allHerds$father),( allHerds$mother)))
ped$ind <- as.numeric(factor(ped$ind,levels=LEV))
ped$father <- as.numeric(factor(ped$father,levels=LEV))
ped$mother <- as.numeric(factor(ped$mother,levels=LEV))
ped$mother
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
LEV <- unique(c(( allHerds$ind),( allHerds$father),( allHerds$mother)))
LEV
ped$ind <- as.numeric(factor(ped$ind,levels=LEV))
ped$ind
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
LEV <- unique(c(( allHerds$ind),( allHerds$father),( allHerds$mother)))
factor(ped$ind,levels=LEV)
ped$ind
LEV
allHerds$ind
allHerds$father
allHerds$mother
LEV <- unique(c(( allHerds$ind),( allHerds$father),( allHerds$mother)))
LEV
( allHerds$ind)
( allHerds$father)
( allHerds$mother)
c(( allHerds$ind),( allHerds$father),( allHerds$mother))
LEV <- unique(c(( as.character(allHerds$ind)),as.charachter( allHerds$father),as.character( allHerds$mother)))
LEV <- unique(c(( as.character(allHerds$ind)),as.character( allHerds$father),as.character( allHerds$mother)))
LEV
ped$ind <- as.numeric(factor(ped$ind,levels=LEV))
ped$father <- as.numeric(factor(ped$father,levels=LEV))
ped$mother <- as.numeric(factor(ped$mother,levels=LEV))
ped$mother
ped$father
ped$ind
w.without.knwon.parents  <-  which(ped$father==which(LEV == "0"))
ped$father[w.without.knwon.parents] <- 0
ped$mother[w.without.knwon.parents] <- 0
ped$sex <- as.numeric(mapvalues(ped$sex, from = c("M", "F"), to = c(1, 2)))
geneal <- gen.genealogy(ped)
u <- which(ped$herd!=-1)
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
LEV <- unique(c(( as.character(allHerds$ind)),as.character( allHerds$father),as.character( allHerds$mother)))
ped$ind <- as.numeric(factor(ped$ind,levels=LEV))
ped$father <- as.numeric(factor(ped$father,levels=LEV))
ped$mother <- as.numeric(factor(ped$mother,levels=LEV))
w.without.knwon.parents  <-  which(ped$father==which(LEV == "0"))
ped$father[w.without.knwon.parents] <- 0
ped$mother[w.without.knwon.parents] <- 0
ped$sex <- as.numeric(mapvalues(ped$sex, from = c("M", "F"), to = c(1, 2)))
geneal <- gen.genealogy(ped)
ped
res <- Simulate.herds(n.herds,n.generations,param.allHerds=param,herds.Network = herds.Network,LHerds=NULL,computeInbreeding  = FALSE)
LHerds <- res$LHerds
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- ped[!duplicated(ped$ind),]
ped
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
ped
LEV <- unique(c(( as.character(allHerds$ind)),as.character( allHerds$father),as.character( allHerds$mother)))
ped$ind_num <- as.numeric(factor(ped$ind,levels=LEV))
cbind(ped$ind,ped$ind_num)
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
LEV <- unique(c(( as.character(allHerds$ind)),as.character( allHerds$father),as.character( allHerds$mother)))
ped$ind_num <- as.numeric(factor(ped$ind,levels=LEV))
cbind(ped$ind,ped$ind_num)
n.herds <- length(LHerds)
size.herds <- sapply(1:n.herds,function(i){nrow(LHerds[[i]])})
allHerds <- do.call("rbind",LHerds)
ped <- allHerds
ped <- ped[!duplicated(ped$ind),]
LEV <- c(levels(allHerds$ind), levels (allHerds$father), levels(allHerds$mother))
LEV
LEV <- unique(c(levels(allHerds$ind), levels (allHerds$father), levels(allHerds$mother)))
LEV
indNew <- mapvalues(ped$ind, from = LEV, to = 1:ength(LEV))
indNew <- mapvalues(ped$ind, from = LEV, to = 1:length(LEV))
indNew
source('functions/modules_simulation.R')
source('functions/complete_simulation.R')
library(igraph,ggplot2)
library(tidyverse)
######  General parameters #################
n.herds  <- 10 #Nb de troupeaux
n.generations <- 50 # Nb de gÃ©nÃ©rations
# Parameters
param.default <- list(n.ram = 3,
>>>>>>> Stashed changes
n.ewe = 40,
career.ram = 8,
career.ewe = 8,
age.min.ram = 0,
age.min.ewe = 0,
age.repro.ewe = 3,
age.repro.ram = 1)
param.default$rate.repro = as.data.frame(cbind(c(0,1,2),c(0,1,0)))
names(param.default$rate.repro) = c('nb.lambs','probability')
<<<<<<< Updated upstream
# Network
n.herds  <- 1 #Nb de troupeaux
param= lapply(1:n.herds,function(i) param.default) # here same parameters for all the Herds.
# Simulation
res <- Simulate.herds(n.herds,n.generations = 50,param.allHerds=param,herds.Network = herds.Network,LHerds=NULL,computeInbreeding  = TRUE)
n.Lacking.i
n.TooOld.i
(pop.table.i$herd != -1) & (pop.table.i$sex == sex)
sum((pop.table.i$herd != -1) & (pop.table.i$sex == sex))
size.i
factorial(99)*factoriel(50)
factorial(99)*factorial(50)
=======
param= lapply(1:n.herds,function(i) param.default) # here same parameters for all the Herds.
ram.Network <- diag(1,n.herds)
plot(graph_from_adjacency_matrix(ram.Network, mode = c("directed")))
herds.Network = list(ewe.for.replace= NULL,ram.for.replace = ram.Network,ram.for.repro = ram.Network)
# Simulation
res <- Simulate.herds(n.herds,n.generations,param.allHerds=param,herds.Network = herds.Network,LHerds=NULL,computeInbreeding  = FALSE)
LHerds <- res$LHerds
# InBreeding
inBreeding <- computeInbreedingFunction(LHerds)
inBreeding$herd <- as.factor(inBreeding$herd)
ggplot(inBreeding,aes(x=inBreed)) + geom_histogram()
ggplot(inBreeding,aes(col=herd,y=inBreed,x=herd)) + geom_boxplot() + ggtitle('independant ')
source('functions/modules_simulation.R')
source('functions/complete_simulation.R')
library(igraph,ggplot2)
library(tidyverse)
######  General parameters #################
n.herds  <- 10 #Nb de troupeaux
n.generations <- 50 # Nb de gÃ©nÃ©rations
# Parameters
param.default <- list(n.ram = 3,
n.ewe = 40,
career.ram = 8,
career.ewe = 8,
age.min.ram = 0,
age.min.ewe = 0,
age.repro.ewe = 3,
age.repro.ram = 1)
param.default$rate.repro = as.data.frame(cbind(c(0,1,2),c(0,1,0)))
names(param.default$rate.repro) = c('nb.lambs','probability')
param= lapply(1:n.herds,function(i) param.default) # here same parameters for all the Herds.
ram.Network <- diag(1,n.herds)
plot(graph_from_adjacency_matrix(ram.Network, mode = c("directed")))
herds.Network = list(ewe.for.replace= NULL,ram.for.replace = ram.Network,ram.for.repro = ram.Network)
# Simulation
res <- Simulate.herds(n.herds,n.generations,param.allHerds=param,herds.Network = herds.Network,LHerds=NULL,computeInbreeding  = FALSE)
LHerds <- res$LHerds
inBreeding <- computeInbreedingFunction(LHerds)
source('functions/modules_simulation.R')
source('functions/complete_simulation.R')
library(igraph,ggplot2)
library(tidyverse)
######  General parameters #################
n.herds  <- 10 #Nb de troupeaux
n.generations <- 50 # Nb de gÃ©nÃ©rations
# Parameters
param.default <- list(n.ram = 3,
n.ewe = 40,
career.ram = 8,
career.ewe = 8,
age.min.ram = 0,
age.min.ewe = 0,
age.repro.ewe = 3,
age.repro.ram = 1)
param.default$rate.repro = as.data.frame(cbind(c(0,1,2),c(0,1,0)))
names(param.default$rate.repro) = c('nb.lambs','probability')
param= lapply(1:n.herds,function(i) param.default) # here same parameters for all the Herds.
####################################################################""
#################" SIMULATION 1 : independent herds : no exchange
#######################################################################"
# Network
ram.Network <- diag(1,n.herds)
plot(graph_from_adjacency_matrix(ram.Network, mode = c("directed")))
herds.Network = list(ewe.for.replace= NULL,ram.for.replace = ram.Network,ram.for.repro = ram.Network)
# Simulation
res <- Simulate.herds(n.herds,n.generations,param.allHerds=param,herds.Network = herds.Network,LHerds=NULL,computeInbreeding  = FALSE)
LHerds <- res$LHerds
# InBreeding
inBreeding <- computeInbreedingFunction(LHerds)
inBreeding$herd <- as.factor(inBreeding$herd)
ggplot(inBreeding,aes(x=inBreed)) + geom_histogram()
ggplot(inBreeding,aes(col=herd,y=inBreed,x=herd)) + geom_boxplot() + ggtitle('independant ')
>>>>>>> Stashed changes
source('functions/modules_simulation.R')
source('functions/complete_simulation.R')
library(igraph,ggplot2)
library(tidyverse)
######  General parameters #################
n.generations <- 50 # Nb de gÃ©nÃ©rations
# Parameters
param.default <- list(n.ram = 2,
n.ewe = 40,
career.ram = 8,
career.ewe = 8,
age.min.ram = 0,
age.min.ewe = 0,
age.repro.ewe = 3,
age.repro.ram = 1)
param.default$rate.repro = as.data.frame(cbind(c(0,1,2),c(0,1,0)))
names(param.default$rate.repro) = c('nb.lambs','probability')
# Network
n.herds  <- 1 #Nb de troupeaux
param= lapply(1:n.herds,function(i) param.default) # here same parameters for all the Herds.
ram.Network <- diag(1,n.herds)
plot(graph_from_adjacency_matrix(ram.Network, mode = c("directed")))
herds.Network = list(ewe.for.replace= NULL,ram.for.replace = ram.Network,ram.for.repro = ram.Network)
############ First simulation
seed = sample(1:100,1)
set.seed(seed)
res <- Simulate.herds(n.herds,n.generations,param.allHerds=param,herds.Network = herds.Network,LHerds=NULL,computeInbreeding  = TRUE)
LHerds <- res$LHerds
source('functions/modules_simulation.R')
source('functions/complete_simulation.R')
library(igraph,ggplot2)
library(tidyverse)
######  General parameters #################
n.generations <- 50 # Nb de gÃ©nÃ©rations
# Parameters
param.default <- list(n.ram = 2,
n.ewe = 40,
career.ram = 8,
career.ewe = 8,
age.min.ram = 0,
age.min.ewe = 0,
age.repro.ewe = 3,
age.repro.ram = 1)
param.default$rate.repro = as.data.frame(cbind(c(0,1,2),c(0,1,0)))
names(param.default$rate.repro) = c('nb.lambs','probability')
####################################################################""
#################" SIMULATION 1 : independent herds : no exchange
#######################################################################"
# Network
n.herds  <- 1 #Nb de troupeaux
param= lapply(1:n.herds,function(i) param.default) # here same parameters for all the Herds.
ram.Network <- diag(1,n.herds)
plot(graph_from_adjacency_matrix(ram.Network, mode = c("directed")))
herds.Network = list(ewe.for.replace= NULL,ram.for.replace = ram.Network,ram.for.repro = ram.Network)
############ First simulation
seed = sample(1:100,1)
set.seed(seed)
res <- Simulate.herds(n.herds,n.generations,param.allHerds=param,herds.Network = herds.Network,LHerds=NULL,computeInbreeding  = TRUE)
n.generations <- 50 # Nb de gÃ©nÃ©rations
# Parameters
param.default <- list(n.ram = 2,
n.ewe = 40,
career.ram = 8,
career.ewe = 8,
age.min.ram = 0,
age.min.ewe = 0,
age.repro.ewe = 3,
age.repro.ram = 1)
param.default$rate.repro = as.data.frame(cbind(c(0,1,2),c(0,1,0)))
names(param.default$rate.repro) = c('nb.lambs','probability')
# Network
n.herds  <- 1 #Nb de troupeaux
param= lapply(1:n.herds,function(i) param.default) # here same parameters for all the Herds.
ram.Network <- diag(1,n.herds)
plot(graph_from_adjacency_matrix(ram.Network, mode = c("directed")))
herds.Network = list(ewe.for.replace= NULL,ram.for.replace = ram.Network,ram.for.repro = ram.Network)
############ First simulation
seed = sample(1:100,1)
set.seed(seed)
res <- Simulate.herds(n.herds,n.generations,param.allHerds=param,herds.Network = herds.Network,LHerds=NULL,computeInbreeding  = TRUE)
res <- Simulate.herds(n.herds,n.generations,param.allHerds=param,herds.Network = herds.Network,LHerds=NULL,computeInbreeding  = FALSE)
LHerds <- res$LHerds
size.herds <- res$herds_size
# InBreeding  along time
inBreedingTime <- res$inBreeding
inBreedingTime$herd <- as.factor(inBreedingTime$herd)
inBreedingTime$gen <- as.factor(inBreedingTime$gen)
ggplot(inBreedingTime,aes(col=gen,y=inBreed,x=gen)) + geom_boxplot() + ggtitle('One herd') +  theme(legend.position='none')
res$inBreeding
res <- Simulate.herds(n.herds,n.generations,param.allHerds=param,herds.Network = herds.Network,LHerds=NULL,computeInbreeding  = TRUE)
